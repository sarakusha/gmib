"use strict";

require("source-map-support/register");

var _crc = require("crc");

var _Address = _interopRequireDefault(require("../Address"));

var _nbconst = require("../nbconst");

var _NmsDatagram = _interopRequireDefault(require("./NmsDatagram"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * @license
 * Copyright (c) 2019. OOO Nata-Info
 * @author Andrei Sarakeev <avs@nata-info.ru>
 *
 * This file is part of the "@nata" project.
 * For the full copyright and license information, please view
 * the EULA file that was distributed with this source code.
 */
describe('NmsDatagram tests', () => {
  const options = {
    destination: new _Address.default('::12:34'),
    id: 123,
    isResponse: true,
    notReply: false,
    nms: Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]),
    priority: 3,
    service: _index.NmsServiceType.Read,
    source: new _Address.default('FF::67')
  };
  test('options test', () => {
    const nms = new _NmsDatagram.default(options);
    expect(nms).toHaveProperty('destination', options.destination);
    expect(nms).toHaveProperty('id', options.id);
    expect(nms).toHaveProperty('isResponse', options.isResponse);
    expect(nms).toHaveProperty('notReply', options.notReply);
    expect(nms).toHaveProperty('nms', options.nms);
    expect(nms).toHaveProperty('priority', options.priority);
    expect(nms).toHaveProperty('index.ts', options.service);
    expect(nms).toHaveProperty('source', options.source);
    expect(nms).toHaveProperty('protocol', 1);
  });
  test('to raw test', () => {
    const nms = new _NmsDatagram.default(options);
    expect(nms.raw.readInt8(0)).toBe(_nbconst.PREAMBLE);
    expect(nms.raw.length).toBe(_nbconst.Offsets.DATA + (3 + options.nms.length) + 2);
  });
  test('from raw test', () => {
    const hexFrame = '7e000000006efa000000000000c004010802008d0d';
    const frame = Buffer.from(hexFrame, 'hex');
    const nms = new _NmsDatagram.default(frame);
    expect(nms.destination.equals('::6e:fa')).toBe(true);
    expect(nms.source.equals(_Address.default.empty)).toBe(true);
    expect(nms.service).toBe(_index.NmsServiceType.Read);
    expect(nms.id).toBe(2);
    expect((0, _crc.crc16ccitt)(frame.slice(1, -2), 0)).toBe(frame.readUInt16BE(frame.length - 2));
  });
  test('circular test', () => {
    const nms = new _NmsDatagram.default(options); // console.log(nms);

    const copy = new _NmsDatagram.default(nms.raw); // console.log(copy);

    expect(nms).toEqual(copy);
    expect(nms.raw.equals(copy.raw)).toBe(true);
  });
  test('NmsRead', () => {
    const read = (0, _index.createNmsRead)(_Address.default.empty, 2);
    expect(read).toHaveProperty('id', 2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ubXMvZGF0YWdyYW0uc3BlYy50cyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIm9wdGlvbnMiLCJkZXN0aW5hdGlvbiIsIkFkZHJlc3MiLCJpZCIsImlzUmVzcG9uc2UiLCJub3RSZXBseSIsIm5tcyIsIkJ1ZmZlciIsImZyb20iLCJwcmlvcml0eSIsInNlcnZpY2UiLCJObXNTZXJ2aWNlVHlwZSIsIlJlYWQiLCJzb3VyY2UiLCJ0ZXN0IiwiTm1zRGF0YWdyYW0iLCJleHBlY3QiLCJ0b0hhdmVQcm9wZXJ0eSIsInJhdyIsInJlYWRJbnQ4IiwidG9CZSIsIlBSRUFNQkxFIiwibGVuZ3RoIiwiT2Zmc2V0cyIsIkRBVEEiLCJoZXhGcmFtZSIsImZyYW1lIiwiZXF1YWxzIiwiZW1wdHkiLCJzbGljZSIsInJlYWRVSW50MTZCRSIsImNvcHkiLCJ0b0VxdWFsIiwicmVhZCJdLCJtYXBwaW5ncyI6Ijs7OztBQVVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBZEE7Ozs7Ozs7OztBQWdCQUEsUUFBUSxDQUFDLG1CQUFELEVBQXNCLE1BQU07QUFDbEMsUUFBTUMsT0FBb0IsR0FBRztBQUMzQkMsSUFBQUEsV0FBVyxFQUFFLElBQUlDLGdCQUFKLENBQVksU0FBWixDQURjO0FBRTNCQyxJQUFBQSxFQUFFLEVBQUUsR0FGdUI7QUFHM0JDLElBQUFBLFVBQVUsRUFBRSxJQUhlO0FBSTNCQyxJQUFBQSxRQUFRLEVBQUUsS0FKaUI7QUFLM0JDLElBQUFBLEdBQUcsRUFBRUMsTUFBTSxDQUFDQyxJQUFQLENBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixDQUE1QixDQUFaLENBTHNCO0FBTTNCQyxJQUFBQSxRQUFRLEVBQUUsQ0FOaUI7QUFPM0JDLElBQUFBLE9BQU8sRUFBRUMsc0JBQWVDLElBUEc7QUFRM0JD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QU4sQ0FBWSxDQUFaLEVBQWUsQ0FBQyxDQUFoQixDQUFYLEVBQStCLENBQS9CLENBQUQsQ0FBTixDQUEwQ1QsSUFBMUMsQ0FBK0NNLEtBQUssQ0FBQ0ksWUFBTixDQUFtQkosS0FBSyxDQUFDSixNQUFOLEdBQWUsQ0FBbEMsQ0FBL0M7QUFDRCxHQVRHLENBQUo7QUFVQVIsRUFBQUEsSUFBSSxDQUFDLGVBQUQsRUFBa0IsTUFBTTtBQUMxQixVQUFNUixHQUFHLEdBQUcsSUFBSVMsb0JBQUosQ0FBZ0JmLE9BQWhCLENBQVosQ0FEMEIsQ0FFMUI7O0FBQ0EsVUFBTStCLElBQUksR0FBRyxJQUFJaEIsb0JBQUosQ0FBZ0JULEdBQUcsQ0FBQ1ksR0FBcEIsQ0FBYixDQUgwQixDQUkxQjs7QUFDQUYsSUFBQUEsTUFBTSxDQUFDVixHQUFELENBQU4sQ0FBWTBCLE9BQVosQ0FBb0JELElBQXBCO0FBQ0FmLElBQUFBLE1BQU0sQ0FBQ1YsR0FBRyxDQUFDWSxHQUFKLENBQVFTLE1BQVIsQ0FBZUksSUFBSSxDQUFDYixHQUFwQixDQUFELENBQU4sQ0FBaUNFLElBQWpDLENBQXNDLElBQXRDO0FBQ0QsR0FQRyxDQUFKO0FBUUFOLEVBQUFBLElBQUksQ0FBQyxTQUFELEVBQVksTUFBTTtBQUNwQixVQUFNbUIsSUFBSSxHQUFHLDBCQUFjL0IsaUJBQVEwQixLQUF0QixFQUE2QixDQUE3QixDQUFiO0FBQ0FaLElBQUFBLE1BQU0sQ0FBQ2lCLElBQUQsQ0FBTixDQUFhaEIsY0FBYixDQUE0QixJQUE1QixFQUFrQyxDQUFsQztBQUNELEdBSEcsQ0FBSjtBQUlELENBbERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOS4gT09PIE5hdGEtSW5mb1xuICogQGF1dGhvciBBbmRyZWkgU2FyYWtlZXYgPGF2c0BuYXRhLWluZm8ucnU+XG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFwiQG5hdGFcIiBwcm9qZWN0LlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXdcbiAqIHRoZSBFVUxBIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCB7IGNyYzE2Y2NpdHQgfSBmcm9tICdjcmMnO1xuaW1wb3J0IEFkZHJlc3MgZnJvbSAnLi4vQWRkcmVzcyc7XG5pbXBvcnQgeyBPZmZzZXRzLCBQUkVBTUJMRSB9IGZyb20gJy4uL25iY29uc3QnO1xuaW1wb3J0IE5tc0RhdGFncmFtLCB7IElObXNPcHRpb25zIH0gZnJvbSAnLi9ObXNEYXRhZ3JhbSc7XG5pbXBvcnQgeyBjcmVhdGVObXNSZWFkLCBObXNTZXJ2aWNlVHlwZSB9IGZyb20gJy4vaW5kZXgnO1xuXG5kZXNjcmliZSgnTm1zRGF0YWdyYW0gdGVzdHMnLCAoKSA9PiB7XG4gIGNvbnN0IG9wdGlvbnM6IElObXNPcHRpb25zID0ge1xuICAgIGRlc3RpbmF0aW9uOiBuZXcgQWRkcmVzcygnOjoxMjozNCcpLFxuICAgIGlkOiAxMjMsXG4gICAgaXNSZXNwb25zZTogdHJ1ZSxcbiAgICBub3RSZXBseTogZmFsc2UsXG4gICAgbm1zOiBCdWZmZXIuZnJvbShbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMF0pLFxuICAgIHByaW9yaXR5OiAzLFxuICAgIHNlcnZpY2U6IE5tc1NlcnZpY2VUeXBlLlJlYWQsXG4gICAgc291cmNlOiBuZXcgQWRkcmVzcygnRkY6OjY3JyksXG4gIH07XG4gIHRlc3QoJ29wdGlvbnMgdGVzdCcsICgpID0+IHtcbiAgICBjb25zdCBubXMgPSBuZXcgTm1zRGF0YWdyYW0ob3B0aW9ucyk7XG4gICAgZXhwZWN0KG5tcykudG9IYXZlUHJvcGVydHkoJ2Rlc3RpbmF0aW9uJywgb3B0aW9ucy5kZXN0aW5hdGlvbik7XG4gICAgZXhwZWN0KG5tcykudG9IYXZlUHJvcGVydHkoJ2lkJywgb3B0aW9ucy5pZCk7XG4gICAgZXhwZWN0KG5tcykudG9IYXZlUHJvcGVydHkoJ2lzUmVzcG9uc2UnLCBvcHRpb25zLmlzUmVzcG9uc2UpO1xuICAgIGV4cGVjdChubXMpLnRvSGF2ZVByb3BlcnR5KCdub3RSZXBseScsIG9wdGlvbnMubm90UmVwbHkpO1xuICAgIGV4cGVjdChubXMpLnRvSGF2ZVByb3BlcnR5KCdubXMnLCBvcHRpb25zLm5tcyk7XG4gICAgZXhwZWN0KG5tcykudG9IYXZlUHJvcGVydHkoJ3ByaW9yaXR5Jywgb3B0aW9ucy5wcmlvcml0eSk7XG4gICAgZXhwZWN0KG5tcykudG9IYXZlUHJvcGVydHkoJ2luZGV4LnRzJywgb3B0aW9ucy5zZXJ2aWNlKTtcbiAgICBleHBlY3Qobm1zKS50b0hhdmVQcm9wZXJ0eSgnc291cmNlJywgb3B0aW9ucy5zb3VyY2UpO1xuICAgIGV4cGVjdChubXMpLnRvSGF2ZVByb3BlcnR5KCdwcm90b2NvbCcsIDEpO1xuICB9KTtcbiAgdGVzdCgndG8gcmF3IHRlc3QnLCAoKSA9PiB7XG4gICAgY29uc3Qgbm1zID0gbmV3IE5tc0RhdGFncmFtKG9wdGlvbnMpO1xuICAgIGV4cGVjdChubXMucmF3LnJlYWRJbnQ4KDApKS50b0JlKFBSRUFNQkxFKTtcbiAgICBleHBlY3Qobm1zLnJhdy5sZW5ndGgpLnRvQmUoT2Zmc2V0cy5EQVRBICsgKDMgKyBvcHRpb25zLm5tcyEubGVuZ3RoKSArIDIpO1xuICB9KTtcbiAgdGVzdCgnZnJvbSByYXcgdGVzdCcsICgpID0+IHtcbiAgICBjb25zdCBoZXhGcmFtZSA9ICc3ZTAwMDAwMDAwNmVmYTAwMDAwMDAwMDAwMGMwMDQwMTA4MDIwMDhkMGQnO1xuICAgIGNvbnN0IGZyYW1lID0gQnVmZmVyLmZyb20oaGV4RnJhbWUsICdoZXgnKTtcbiAgICBjb25zdCBubXMgPSBuZXcgTm1zRGF0YWdyYW0oZnJhbWUpO1xuICAgIGV4cGVjdChubXMuZGVzdGluYXRpb24uZXF1YWxzKCc6OjZlOmZhJykpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KG5tcy5zb3VyY2UuZXF1YWxzKEFkZHJlc3MuZW1wdHkpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChubXMuc2VydmljZSkudG9CZShObXNTZXJ2aWNlVHlwZS5SZWFkKTtcbiAgICBleHBlY3Qobm1zLmlkKS50b0JlKDIpO1xuICAgIGV4cGVjdChjcmMxNmNjaXR0KGZyYW1lLnNsaWNlKDEsIC0yKSwgMCkpLnRvQmUoZnJhbWUucmVhZFVJbnQxNkJFKGZyYW1lLmxlbmd0aCAtIDIpKTtcbiAgfSk7XG4gIHRlc3QoJ2NpcmN1bGFyIHRlc3QnLCAoKSA9PiB7XG4gICAgY29uc3Qgbm1zID0gbmV3IE5tc0RhdGFncmFtKG9wdGlvbnMpO1xuICAgIC8vIGNvbnNvbGUubG9nKG5tcyk7XG4gICAgY29uc3QgY29weSA9IG5ldyBObXNEYXRhZ3JhbShubXMucmF3KTtcbiAgICAvLyBjb25zb2xlLmxvZyhjb3B5KTtcbiAgICBleHBlY3Qobm1zKS50b0VxdWFsKGNvcHkpO1xuICAgIGV4cGVjdChubXMucmF3LmVxdWFscyhjb3B5LnJhdykpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuICB0ZXN0KCdObXNSZWFkJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlYWQgPSBjcmVhdGVObXNSZWFkKEFkZHJlc3MuZW1wdHksIDIpO1xuICAgIGV4cGVjdChyZWFkKS50b0hhdmVQcm9wZXJ0eSgnaWQnLCAyKTtcbiAgfSk7XG59KTtcbiJdfQ==