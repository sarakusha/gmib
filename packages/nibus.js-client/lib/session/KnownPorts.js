"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MibDescriptionV = exports.NibusParityV = exports.NibusBaudRateV = exports.FindKindV = exports.KnownPortV = exports.CategoryV = void 0;

require("source-map-support/register");

var t = _interopRequireWildcard(require("io-ts"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * @license
 * Copyright (c) 2019. OOO Nata-Info
 * @author Andrei Sarakeev <avs@nata-info.ru>
 *
 * This file is part of the "@nata" project.
 * For the full copyright and license information, please view
 * the EULA file that was distributed with this source code.
 */

/* tslint:disable:variable-name */
const CategoryV = t.union([t.keyof({
  siolynx: null,
  minihost: null,
  fancontrol: null,
  c22: null,
  relay: null,
  undefined: null
}), t.undefined]);
exports.CategoryV = CategoryV;
const KnownPortV = t.intersection([t.type({
  comName: t.string,
  productId: t.number,
  vendorId: t.number
}), t.partial({
  manufacturer: t.string,
  serialNumber: t.string,
  pnpId: t.string,
  locationId: t.string,
  deviceAddress: t.number,
  device: t.string,
  category: CategoryV
})]);
exports.KnownPortV = KnownPortV;
const FindKindV = t.keyof({
  sarp: null,
  version: null
}, 'FindKind');
exports.FindKindV = FindKindV;
const NibusBaudRateV = t.union([t.literal(115200), t.literal(57600), t.literal(28800)], 'NibusBaudRate');
exports.NibusBaudRateV = NibusBaudRateV;
const NibusParityV = t.keyof({
  none: null,
  even: null,
  mark: null
}, 'NibusParity');
exports.NibusParityV = NibusParityV;
const MibDescriptionV = t.partial({
  type: t.number,
  mib: t.string,
  link: t.boolean,
  baudRate: NibusBaudRateV,
  parity: NibusParityV,
  category: t.string,
  find: FindKindV,
  disableBatchReading: t.boolean
});
exports.MibDescriptionV = MibDescriptionV;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXNzaW9uL0tub3duUG9ydHMudHMiXSwibmFtZXMiOlsiQ2F0ZWdvcnlWIiwidCIsInVuaW9uIiwia2V5b2YiLCJzaW9seW54IiwibWluaWhvc3QiLCJmYW5jb250cm9sIiwiYzIyIiwicmVsYXkiLCJ1bmRlZmluZWQiLCJLbm93blBvcnRWIiwiaW50ZXJzZWN0aW9uIiwidHlwZSIsImNvbU5hbWUiLCJzdHJpbmciLCJwcm9kdWN0SWQiLCJudW1iZXIiLCJ2ZW5kb3JJZCIsInBhcnRpYWwiLCJtYW51ZmFjdHVyZXIiLCJzZXJpYWxOdW1iZXIiLCJwbnBJZCIsImxvY2F0aW9uSWQiLCJkZXZpY2VBZGRyZXNzIiwiZGV2aWNlIiwiY2F0ZWdvcnkiLCJGaW5kS2luZFYiLCJzYXJwIiwidmVyc2lvbiIsIk5pYnVzQmF1ZFJhdGVWIiwibGl0ZXJhbCIsIk5pYnVzUGFyaXR5ViIsIm5vbmUiLCJldmVuIiwibWFyayIsIk1pYkRlc2NyaXB0aW9uViIsIm1pYiIsImxpbmsiLCJib29sZWFuIiwiYmF1ZFJhdGUiLCJwYXJpdHkiLCJmaW5kIiwiZGlzYWJsZUJhdGNoUmVhZGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7Ozs7QUFYQTs7Ozs7Ozs7OztBQVVBO0FBS08sTUFBTUEsU0FBUyxHQUFHQyxDQUFDLENBQUNDLEtBQUYsQ0FBUSxDQUMvQkQsQ0FBQyxDQUFDRSxLQUFGLENBQVE7QUFDTkMsRUFBQUEsT0FBTyxFQUFFLElBREg7QUFFTkMsRUFBQUEsUUFBUSxFQUFFLElBRko7QUFHTkMsRUFBQUEsVUFBVSxFQUFFLElBSE47QUFJTkMsRUFBQUEsR0FBRyxFQUFFLElBSkM7QUFLTkMsRUFBQUEsS0FBSyxFQUFFLElBTEQ7QUFNTkMsRUFBQUEsU0FBUyxFQUFFO0FBTkwsQ0FBUixDQUQrQixFQVMvQlIsQ0FBQyxDQUFDUSxTQVQ2QixDQUFSLENBQWxCOztBQVlBLE1BQU1DLFVBQVUsR0FBR1QsQ0FBQyxDQUFDVSxZQUFGLENBQWUsQ0FDdkNWLENBQUMsQ0FBQ1csSUFBRixDQUFPO0FBQ0xDLEVBQUFBLE9BQU8sRUFBRVosQ0FBQyxDQUFDYSxNQUROO0FBRUxDLEVBQUFBLFNBQVMsRUFBRWQsQ0FBQyxDQUFDZSxNQUZSO0FBR0xDLEVBQUFBLFFBQVEsRUFBRWhCLENBQUMsQ0FBQ2U7QUFIUCxDQUFQLENBRHVDLEVBTXZDZixDQUFDLENBQUNpQixPQUFGLENBQVU7QUFDUkMsRUFBQUEsWUFBWSxFQUFFbEIsQ0FBQyxDQUFDYSxNQURSO0FBRVJNLEVBQUFBLFlBQVksRUFBRW5CLENBQUMsQ0FBQ2EsTUFGUjtBQUdSTyxFQUFBQSxLQUFLLEVBQUVwQixDQUFDLENBQUNhLE1BSEQ7QUFJUlEsRUFBQUEsVUFBVSxFQUFFckIsQ0FBQyxDQUFDYSxNQUpOO0FBS1JTLEVBQUFBLGFBQWEsRUFBRXRCLENBQUMsQ0FBQ2UsTUFMVDtBQU1SUSxFQUFBQSxNQUFNLEVBQUV2QixDQUFDLENBQUNhLE1BTkY7QUFPUlcsRUFBQUEsUUFBUSxFQUFFekI7QUFQRixDQUFWLENBTnVDLENBQWYsQ0FBbkI7O0FBbUJBLE1BQU0wQixTQUFTLEdBQUd6QixDQUFDLENBQUNFLEtBQUYsQ0FBUTtBQUMvQndCLEVBQUFBLElBQUksRUFBRSxJQUR5QjtBQUUvQkMsRUFBQUEsT0FBTyxFQUFFO0FBRnNCLENBQVIsRUFHdEIsVUFIc0IsQ0FBbEI7O0FBTUEsTUFBTUMsY0FBYyxHQUFHNUIsQ0FBQyxDQUFDQyxLQUFGLENBQzVCLENBQUNELENBQUMsQ0FBQzZCLE9BQUYsQ0FBVSxNQUFWLENBQUQsRUFBb0I3QixDQUFDLENBQUM2QixPQUFGLENBQVUsS0FBVixDQUFwQixFQUFzQzdCLENBQUMsQ0FBQzZCLE9BQUYsQ0FBVSxLQUFWLENBQXRDLENBRDRCLEVBRTVCLGVBRjRCLENBQXZCOztBQUtBLE1BQU1DLFlBQVksR0FBRzlCLENBQUMsQ0FBQ0UsS0FBRixDQUMxQjtBQUNFNkIsRUFBQUEsSUFBSSxFQUFFLElBRFI7QUFFRUMsRUFBQUEsSUFBSSxFQUFFLElBRlI7QUFHRUMsRUFBQUEsSUFBSSxFQUFFO0FBSFIsQ0FEMEIsRUFNMUIsYUFOMEIsQ0FBckI7O0FBWUEsTUFBTUMsZUFBZSxHQUFHbEMsQ0FBQyxDQUFDaUIsT0FBRixDQUFVO0FBQ3ZDTixFQUFBQSxJQUFJLEVBQUVYLENBQUMsQ0FBQ2UsTUFEK0I7QUFFdkNvQixFQUFBQSxHQUFHLEVBQUVuQyxDQUFDLENBQUNhLE1BRmdDO0FBR3ZDdUIsRUFBQUEsSUFBSSxFQUFFcEMsQ0FBQyxDQUFDcUMsT0FIK0I7QUFJdkNDLEVBQUFBLFFBQVEsRUFBRVYsY0FKNkI7QUFLdkNXLEVBQUFBLE1BQU0sRUFBRVQsWUFMK0I7QUFNdkNOLEVBQUFBLFFBQVEsRUFBRXhCLENBQUMsQ0FBQ2EsTUFOMkI7QUFPdkMyQixFQUFBQSxJQUFJLEVBQUVmLFNBUGlDO0FBUXZDZ0IsRUFBQUEsbUJBQW1CLEVBQUV6QyxDQUFDLENBQUNxQztBQVJnQixDQUFWLENBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkuIE9PTyBOYXRhLUluZm9cbiAqIEBhdXRob3IgQW5kcmVpIFNhcmFrZWV2IDxhdnNAbmF0YS1pbmZvLnJ1PlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBcIkBuYXRhXCIgcHJvamVjdC5cbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3XG4gKiB0aGUgRVVMQSBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXG5pbXBvcnQgKiBhcyB0IGZyb20gJ2lvLXRzJztcbi8vIGltcG9ydCB7IE5pYnVzQmF1ZFJhdGUsIE5pYnVzQmF1ZFJhdGVWIH0gZnJvbSAnLi4vbmlidXMnO1xuXG5leHBvcnQgdHlwZSBIZXhPck51bWJlciA9IHN0cmluZyB8IG51bWJlcjtcbmV4cG9ydCBjb25zdCBDYXRlZ29yeVYgPSB0LnVuaW9uKFtcbiAgdC5rZXlvZih7XG4gICAgc2lvbHlueDogbnVsbCxcbiAgICBtaW5paG9zdDogbnVsbCxcbiAgICBmYW5jb250cm9sOiBudWxsLFxuICAgIGMyMjogbnVsbCxcbiAgICByZWxheTogbnVsbCxcbiAgICB1bmRlZmluZWQ6IG51bGwsXG4gIH0pLFxuICB0LnVuZGVmaW5lZCxcbl0pO1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnkgPSB0LlR5cGVPZjx0eXBlb2YgQ2F0ZWdvcnlWPjtcbmV4cG9ydCBjb25zdCBLbm93blBvcnRWID0gdC5pbnRlcnNlY3Rpb24oW1xuICB0LnR5cGUoe1xuICAgIGNvbU5hbWU6IHQuc3RyaW5nLFxuICAgIHByb2R1Y3RJZDogdC5udW1iZXIsXG4gICAgdmVuZG9ySWQ6IHQubnVtYmVyLFxuICB9KSxcbiAgdC5wYXJ0aWFsKHtcbiAgICBtYW51ZmFjdHVyZXI6IHQuc3RyaW5nLFxuICAgIHNlcmlhbE51bWJlcjogdC5zdHJpbmcsXG4gICAgcG5wSWQ6IHQuc3RyaW5nLFxuICAgIGxvY2F0aW9uSWQ6IHQuc3RyaW5nLFxuICAgIGRldmljZUFkZHJlc3M6IHQubnVtYmVyLFxuICAgIGRldmljZTogdC5zdHJpbmcsXG4gICAgY2F0ZWdvcnk6IENhdGVnb3J5VixcbiAgfSksXG5dKTtcblxuZXhwb3J0IGludGVyZmFjZSBJS25vd25Qb3J0IGV4dGVuZHMgdC5UeXBlT2Y8dHlwZW9mIEtub3duUG9ydFY+IHt9XG5cbmV4cG9ydCBjb25zdCBGaW5kS2luZFYgPSB0LmtleW9mKHtcbiAgc2FycDogbnVsbCxcbiAgdmVyc2lvbjogbnVsbCxcbn0sICdGaW5kS2luZCcpO1xuZXhwb3J0IHR5cGUgRmluZEtpbmQgPSB0LlR5cGVPZjx0eXBlb2YgRmluZEtpbmRWPjtcblxuZXhwb3J0IGNvbnN0IE5pYnVzQmF1ZFJhdGVWID0gdC51bmlvbihcbiAgW3QubGl0ZXJhbCgxMTUyMDApLCB0LmxpdGVyYWwoNTc2MDApLCB0LmxpdGVyYWwoMjg4MDApXSxcbiAgJ05pYnVzQmF1ZFJhdGUnLFxuKTtcblxuZXhwb3J0IGNvbnN0IE5pYnVzUGFyaXR5ViA9IHQua2V5b2YoXG4gIHtcbiAgICBub25lOiBudWxsLFxuICAgIGV2ZW46IG51bGwsXG4gICAgbWFyazogbnVsbCxcbiAgfSxcbiAgJ05pYnVzUGFyaXR5Jyxcbik7XG5cbmV4cG9ydCB0eXBlIE5pYnVzQmF1ZFJhdGUgPSB0LlR5cGVPZjx0eXBlb2YgTmlidXNCYXVkUmF0ZVY+O1xuZXhwb3J0IHR5cGUgTmlidXNQYXJpdHkgPSB0LlR5cGVPZjx0eXBlb2YgTmlidXNQYXJpdHlWPjtcblxuZXhwb3J0IGNvbnN0IE1pYkRlc2NyaXB0aW9uViA9IHQucGFydGlhbCh7XG4gIHR5cGU6IHQubnVtYmVyLFxuICBtaWI6IHQuc3RyaW5nLFxuICBsaW5rOiB0LmJvb2xlYW4sXG4gIGJhdWRSYXRlOiBOaWJ1c0JhdWRSYXRlVixcbiAgcGFyaXR5OiBOaWJ1c1Bhcml0eVYsXG4gIGNhdGVnb3J5OiB0LnN0cmluZyxcbiAgZmluZDogRmluZEtpbmRWLFxuICBkaXNhYmxlQmF0Y2hSZWFkaW5nOiB0LmJvb2xlYW4sXG59KTtcblxuZXhwb3J0IGludGVyZmFjZSBJTWliRGVzY3JpcHRpb24gZXh0ZW5kcyB0LlR5cGVPZjx0eXBlb2YgTWliRGVzY3JpcHRpb25WPiB7XG4gIC8vIGJhdWRSYXRlPzogTmlidXNCYXVkUmF0ZTtcbiAgLy8gcGFyaXR5PzogTmlidXNQYXJpdHk7XG4gIC8vIGZpbmQ/OiBGaW5kS2luZDtcbn1cbiJdfQ==