"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MibDescriptionV = exports.NibusParityV = exports.NibusBaudRateV = exports.FindKindV = void 0;

require("source-map-support/register");

var t = _interopRequireWildcard(require("io-ts"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * @license
 * Copyright (c) 2019. OOO Nata-Info
 * @author Andrei Sarakeev <avs@nata-info.ru>
 *
 * This file is part of the "@nata" project.
 * For the full copyright and license information, please view
 * the EULA file that was distributed with this source code.
 */

/* tslint:disable:variable-name */
const FindKindV = t.keyof({
  sarp: null,
  version: null
}, 'FindKind');
exports.FindKindV = FindKindV;
const NibusBaudRateV = t.union([t.literal(115200), t.literal(57600), t.literal(28800)], 'NibusBaudRate');
exports.NibusBaudRateV = NibusBaudRateV;
const NibusParityV = t.keyof({
  none: null,
  even: null,
  mark: null
}, 'NibusParity');
exports.NibusParityV = NibusParityV;
const MibDescriptionV = t.partial({
  type: t.number,
  mib: t.string,
  link: t.boolean,
  baudRate: NibusBaudRateV,
  parity: NibusParityV,
  category: t.string,
  find: FindKindV,
  disableBatchReading: t.boolean
});
exports.MibDescriptionV = MibDescriptionV;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NaWJEZXNjcmlwdGlvbi50cyJdLCJuYW1lcyI6WyJGaW5kS2luZFYiLCJ0Iiwia2V5b2YiLCJzYXJwIiwidmVyc2lvbiIsIk5pYnVzQmF1ZFJhdGVWIiwidW5pb24iLCJsaXRlcmFsIiwiTmlidXNQYXJpdHlWIiwibm9uZSIsImV2ZW4iLCJtYXJrIiwiTWliRGVzY3JpcHRpb25WIiwicGFydGlhbCIsInR5cGUiLCJudW1iZXIiLCJtaWIiLCJzdHJpbmciLCJsaW5rIiwiYm9vbGVhbiIsImJhdWRSYXRlIiwicGFyaXR5IiwiY2F0ZWdvcnkiLCJmaW5kIiwiZGlzYWJsZUJhdGNoUmVhZGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVUE7Ozs7QUFWQTs7Ozs7Ozs7OztBQVNBO0FBR08sTUFBTUEsU0FBUyxHQUFHQyxDQUFDLENBQUNDLEtBQUYsQ0FBUTtBQUMvQkMsRUFBQUEsSUFBSSxFQUFFLElBRHlCO0FBRS9CQyxFQUFBQSxPQUFPLEVBQUU7QUFGc0IsQ0FBUixFQUd0QixVQUhzQixDQUFsQjs7QUFNQSxNQUFNQyxjQUFjLEdBQUdKLENBQUMsQ0FBQ0ssS0FBRixDQUM1QixDQUFDTCxDQUFDLENBQUNNLE9BQUYsQ0FBVSxNQUFWLENBQUQsRUFBb0JOLENBQUMsQ0FBQ00sT0FBRixDQUFVLEtBQVYsQ0FBcEIsRUFBc0NOLENBQUMsQ0FBQ00sT0FBRixDQUFVLEtBQVYsQ0FBdEMsQ0FENEIsRUFFNUIsZUFGNEIsQ0FBdkI7O0FBS0EsTUFBTUMsWUFBWSxHQUFHUCxDQUFDLENBQUNDLEtBQUYsQ0FDMUI7QUFDRU8sRUFBQUEsSUFBSSxFQUFFLElBRFI7QUFFRUMsRUFBQUEsSUFBSSxFQUFFLElBRlI7QUFHRUMsRUFBQUEsSUFBSSxFQUFFO0FBSFIsQ0FEMEIsRUFNMUIsYUFOMEIsQ0FBckI7O0FBWUEsTUFBTUMsZUFBZSxHQUFHWCxDQUFDLENBQUNZLE9BQUYsQ0FBVTtBQUN2Q0MsRUFBQUEsSUFBSSxFQUFFYixDQUFDLENBQUNjLE1BRCtCO0FBRXZDQyxFQUFBQSxHQUFHLEVBQUVmLENBQUMsQ0FBQ2dCLE1BRmdDO0FBR3ZDQyxFQUFBQSxJQUFJLEVBQUVqQixDQUFDLENBQUNrQixPQUgrQjtBQUl2Q0MsRUFBQUEsUUFBUSxFQUFFZixjQUo2QjtBQUt2Q2dCLEVBQUFBLE1BQU0sRUFBRWIsWUFMK0I7QUFNdkNjLEVBQUFBLFFBQVEsRUFBRXJCLENBQUMsQ0FBQ2dCLE1BTjJCO0FBT3ZDTSxFQUFBQSxJQUFJLEVBQUV2QixTQVBpQztBQVF2Q3dCLEVBQUFBLG1CQUFtQixFQUFFdkIsQ0FBQyxDQUFDa0I7QUFSZ0IsQ0FBVixDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE5LiBPT08gTmF0YS1JbmZvXG4gKiBAYXV0aG9yIEFuZHJlaSBTYXJha2VldiA8YXZzQG5hdGEtaW5mby5ydT5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgXCJAbmF0YVwiIHByb2plY3QuXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2Ugdmlld1xuICogdGhlIEVVTEEgZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cbmltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnO1xuXG5leHBvcnQgY29uc3QgRmluZEtpbmRWID0gdC5rZXlvZih7XG4gIHNhcnA6IG51bGwsXG4gIHZlcnNpb246IG51bGwsXG59LCAnRmluZEtpbmQnKTtcbmV4cG9ydCB0eXBlIEZpbmRLaW5kID0gdC5UeXBlT2Y8dHlwZW9mIEZpbmRLaW5kVj47XG5cbmV4cG9ydCBjb25zdCBOaWJ1c0JhdWRSYXRlViA9IHQudW5pb24oXG4gIFt0LmxpdGVyYWwoMTE1MjAwKSwgdC5saXRlcmFsKDU3NjAwKSwgdC5saXRlcmFsKDI4ODAwKV0sXG4gICdOaWJ1c0JhdWRSYXRlJyxcbik7XG5cbmV4cG9ydCBjb25zdCBOaWJ1c1Bhcml0eVYgPSB0LmtleW9mKFxuICB7XG4gICAgbm9uZTogbnVsbCxcbiAgICBldmVuOiBudWxsLFxuICAgIG1hcms6IG51bGwsXG4gIH0sXG4gICdOaWJ1c1Bhcml0eScsXG4pO1xuXG5leHBvcnQgdHlwZSBOaWJ1c0JhdWRSYXRlID0gdC5UeXBlT2Y8dHlwZW9mIE5pYnVzQmF1ZFJhdGVWPjtcbmV4cG9ydCB0eXBlIE5pYnVzUGFyaXR5ID0gdC5UeXBlT2Y8dHlwZW9mIE5pYnVzUGFyaXR5Vj47XG5cbmV4cG9ydCBjb25zdCBNaWJEZXNjcmlwdGlvblYgPSB0LnBhcnRpYWwoe1xuICB0eXBlOiB0Lm51bWJlcixcbiAgbWliOiB0LnN0cmluZyxcbiAgbGluazogdC5ib29sZWFuLFxuICBiYXVkUmF0ZTogTmlidXNCYXVkUmF0ZVYsXG4gIHBhcml0eTogTmlidXNQYXJpdHlWLFxuICBjYXRlZ29yeTogdC5zdHJpbmcsXG4gIGZpbmQ6IEZpbmRLaW5kVixcbiAgZGlzYWJsZUJhdGNoUmVhZGluZzogdC5ib29sZWFuLFxufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1pYkRlc2NyaXB0aW9uIGV4dGVuZHMgdC5UeXBlT2Y8dHlwZW9mIE1pYkRlc2NyaXB0aW9uVj4ge1xuICAvLyBiYXVkUmF0ZT86IE5pYnVzQmF1ZFJhdGU7XG4gIC8vIHBhcml0eT86IE5pYnVzUGFyaXR5O1xuICAvLyBmaW5kPzogRmluZEtpbmQ7XG59XG4iXX0=