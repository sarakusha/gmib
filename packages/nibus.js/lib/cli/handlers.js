"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeAddressHandler = void 0;

require("source-map-support/register");

var _mib = require("@nata/nibus.js-client/lib/mib");

var _nibus = _interopRequireWildcard(require("@nata/nibus.js-client"));

var _nibus2 = require("@nata/nibus.js-client/lib/nibus");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const makeAddressHandler = (action, breakout = false) => args => new Promise(async (resolve, reject) => {
  let hasFound = false;

  const close = err => {
    clearTimeout(timeout);

    _nibus.default.close();

    if (err || !hasFound) {
      return reject(err || 'Устройство не найдено');
    }

    resolve();
  };

  const mac = new _nibus.Address(args.mac);
  let count = await _nibus.default.start(); // На Windows сложнее метод определения и занимает больше времени

  if (process.platform === 'win32') {
    count *= 2;
  } // const setCount: NibusCounter = (handler = (c: number) => c) => count = handler(count);


  const perform = async (connection, mibOrType, version) => {
    clearTimeout(timeout);

    const device = _mib.devices.create(mac, mibOrType, version);

    device.connection = connection;
    await action(device, args);
    hasFound = true;
  };

  _nibus.default.on('found', async ({
    address,
    connection
  }) => {
    try {
      if (address.equals(mac) && connection.description.mib) {
        if (!args.mib || args.mib === connection.description.mib) {
          await perform(connection, connection.description.mib);
          if (breakout) return close();
          wait();
        }
      }

      if (address.equals(mac) && connection.description.type || connection.description.link) {
        count += 1;
        const [version, type] = await connection.getVersion(mac);

        if (type) {
          await perform(connection, type, version);
          if (breakout) return close();
          wait();
        }
      }
    } catch (e) {
      close(e.message || e);
    }

    count -= 1;

    if (count === 0) {
      clearTimeout(timeout);
      process.nextTick(close);
    }
  });

  const wait = () => {
    count -= 1;

    if (count > 0) {
      timeout = setTimeout(wait, (0, _nibus2.getNibusTimeout)());
    } else {
      close();
    }
  };

  let timeout = setTimeout(wait, (0, _nibus2.getNibusTimeout)());
});

exports.makeAddressHandler = makeAddressHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvaGFuZGxlcnMudHMiXSwibmFtZXMiOlsibWFrZUFkZHJlc3NIYW5kbGVyIiwiYWN0aW9uIiwiYnJlYWtvdXQiLCJhcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJoYXNGb3VuZCIsImNsb3NlIiwiZXJyIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsInNlc3Npb24iLCJtYWMiLCJBZGRyZXNzIiwiY291bnQiLCJzdGFydCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsInBlcmZvcm0iLCJjb25uZWN0aW9uIiwibWliT3JUeXBlIiwidmVyc2lvbiIsImRldmljZSIsImRldmljZXMiLCJjcmVhdGUiLCJvbiIsImFkZHJlc3MiLCJlcXVhbHMiLCJkZXNjcmlwdGlvbiIsIm1pYiIsIndhaXQiLCJ0eXBlIiwibGluayIsImdldFZlcnNpb24iLCJlIiwibWVzc2FnZSIsIm5leHRUaWNrIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7Ozs7QUFTQSxNQUFNQSxrQkFBa0IsR0FBRyxDQUMxQkMsTUFEMEIsRUFDSEMsUUFBUSxHQUFHLEtBRFIsS0FFeEJDLElBQUQsSUFDRSxJQUFJQyxPQUFKLENBQVksT0FBT0MsT0FBUCxFQUFnQkMsTUFBaEIsS0FBMkI7QUFDckMsTUFBSUMsUUFBUSxHQUFHLEtBQWY7O0FBQ0EsUUFBTUMsS0FBSyxHQUFJQyxHQUFELElBQWtCO0FBQzlCQyxJQUFBQSxZQUFZLENBQUNDLE9BQUQsQ0FBWjs7QUFDQUMsbUJBQVFKLEtBQVI7O0FBQ0EsUUFBSUMsR0FBRyxJQUFJLENBQUNGLFFBQVosRUFBc0I7QUFDcEIsYUFBT0QsTUFBTSxDQUFDRyxHQUFHLElBQUksdUJBQVIsQ0FBYjtBQUNEOztBQUNESixJQUFBQSxPQUFPO0FBQ1IsR0FQRDs7QUFRQSxRQUFNUSxHQUFHLEdBQUcsSUFBSUMsY0FBSixDQUFZWCxJQUFJLENBQUNVLEdBQWpCLENBQVo7QUFDQSxN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OS4gTmF0YS1JbmZvXG4gKiBAYXV0aG9yIEFuZHJlaSBTYXJha2VldiA8YXZzQG5hdGEtaW5mby5ydT5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgXCJAbmF0YVwiIHByb2plY3QuXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2Ugdmlld1xuICogdGhlIEVVTEEgZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IHsgQXJndW1lbnRzLCBEZWZpbmVkIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgZGV2aWNlcywgSURldmljZSB9IGZyb20gJ0BuYXRhL25pYnVzLmpzLWNsaWVudC9saWIvbWliJztcbmltcG9ydCBzZXNzaW9uLCB7IEFkZHJlc3MgfSBmcm9tICdAbmF0YS9uaWJ1cy5qcy1jbGllbnQnO1xuaW1wb3J0IHsgZ2V0TmlidXNUaW1lb3V0LCBOaWJ1c0Nvbm5lY3Rpb24gfSBmcm9tICdAbmF0YS9uaWJ1cy5qcy1jbGllbnQvbGliL25pYnVzJztcbmltcG9ydCB7IENvbW1vbk9wdHMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG4vLyBleHBvcnQgdHlwZSBOaWJ1c0NvdW50ZXIgPSAoaGFuZGxlcjogKGNvdW50OiBudW1iZXIpID0+IG51bWJlcikgPT4gdm9pZDtcblxuaW50ZXJmYWNlIEFjdGlvbkZ1bmM8Tz4ge1xuICAoZGV2aWNlOiBJRGV2aWNlLCBhcmdzOiBBcmd1bWVudHM8Tz4pOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5jb25zdCBtYWtlQWRkcmVzc0hhbmRsZXIgPSA8TyBleHRlbmRzIERlZmluZWQ8Q29tbW9uT3B0cywgJ20nIHwgJ21hYyc+PlxuKGFjdGlvbjogQWN0aW9uRnVuYzxPPiwgYnJlYWtvdXQgPSBmYWxzZSkgPT5cbiAgKGFyZ3M6IEFyZ3VtZW50czxPPikgPT5cbiAgICBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgaGFzRm91bmQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGNsb3NlID0gKGVycj86IHN0cmluZykgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICAgICAgaWYgKGVyciB8fCAhaGFzRm91bmQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVyciB8fCAn0KPRgdGC0YDQvtC50YHRgtCy0L4g0L3QtSDQvdCw0LnQtNC10L3QvicpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBtYWMgPSBuZXcgQWRkcmVzcyhhcmdzLm1hYyk7XG4gICAgICBsZXQgY291bnQgPSBhd2FpdCBzZXNzaW9uLnN0YXJ0KCk7XG4gICAgICAvLyDQndCwIFdpbmRvd3Mg0YHQu9C+0LbQvdC10LUg0LzQtdGC0L7QtCDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC4INC30LDQvdC40LzQsNC10YIg0LHQvtC70YzRiNC1INCy0YDQtdC80LXQvdC4XG4gICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgICBjb3VudCAqPSAyO1xuICAgICAgfVxuICAgICAgLy8gY29uc3Qgc2V0Q291bnQ6IE5pYnVzQ291bnRlciA9IChoYW5kbGVyID0gKGM6IG51bWJlcikgPT4gYykgPT4gY291bnQgPSBoYW5kbGVyKGNvdW50KTtcblxuICAgICAgY29uc3QgcGVyZm9ybSA9IGFzeW5jIChjb25uZWN0aW9uOiBOaWJ1c0Nvbm5lY3Rpb24sIG1pYk9yVHlwZTogYW55LCB2ZXJzaW9uPzogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgY29uc3QgZGV2aWNlID0gZGV2aWNlcy5jcmVhdGUobWFjLCBtaWJPclR5cGUsIHZlcnNpb24pO1xuICAgICAgICBkZXZpY2UuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIGF3YWl0IGFjdGlvbihkZXZpY2UsIGFyZ3MpO1xuICAgICAgICBoYXNGb3VuZCA9IHRydWU7XG4gICAgICB9O1xuXG4gICAgICBzZXNzaW9uLm9uKCdmb3VuZCcsIGFzeW5jICh7IGFkZHJlc3MsIGNvbm5lY3Rpb24gfSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChhZGRyZXNzLmVxdWFscyhtYWMpICYmIGNvbm5lY3Rpb24uZGVzY3JpcHRpb24ubWliKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3MubWliIHx8IGFyZ3MubWliID09PSBjb25uZWN0aW9uLmRlc2NyaXB0aW9uLm1pYikge1xuICAgICAgICAgICAgICBhd2FpdCBwZXJmb3JtKGNvbm5lY3Rpb24sIGNvbm5lY3Rpb24uZGVzY3JpcHRpb24ubWliKTtcbiAgICAgICAgICAgICAgaWYgKGJyZWFrb3V0KSByZXR1cm4gY2xvc2UoKTtcbiAgICAgICAgICAgICAgd2FpdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYWRkcmVzcy5lcXVhbHMobWFjKSAmJiBjb25uZWN0aW9uLmRlc2NyaXB0aW9uLnR5cGUgfHwgY29ubmVjdGlvbi5kZXNjcmlwdGlvbi5saW5rKSB7XG4gICAgICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICAgICAgY29uc3QgW3ZlcnNpb24sIHR5cGVdID0gYXdhaXQgY29ubmVjdGlvbi5nZXRWZXJzaW9uKG1hYyk7XG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICBhd2FpdCBwZXJmb3JtKGNvbm5lY3Rpb24sIHR5cGUsIHZlcnNpb24pO1xuICAgICAgICAgICAgICBpZiAoYnJlYWtvdXQpIHJldHVybiBjbG9zZSgpO1xuICAgICAgICAgICAgICB3YWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY2xvc2UoZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50IC09IDE7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGNsb3NlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHdhaXQgPSAoKSA9PiB7XG4gICAgICAgIGNvdW50IC09IDE7XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWl0LCBnZXROaWJ1c1RpbWVvdXQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbGV0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdhaXQsIGdldE5pYnVzVGltZW91dCgpKTtcbiAgICB9KTtcblxuZXhwb3J0IHsgbWFrZUFkZHJlc3NIYW5kbGVyIH07XG4iXX0=