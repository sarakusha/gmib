"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = action;
exports.default = void 0;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _progress = _interopRequireDefault(require("progress"));

var _os = require("os");

var _helper = require("@nata/nibus.js-client/lib/nibus/helper");

var _handlers = require("../handlers");

var _write = require("./write");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function action(device, args) {
  const {
    domain,
    offset,
    size,
    out,
    force,
    hex,
    quiet
  } = args;
  const writeArgs = out ? { ...args,
    quiet: true
  } : args;
  await (0, _write.action)(device, writeArgs);

  let close = () => {};

  let write;

  let tick = size => {};

  if (out) {
    if (!force && _fs.default.existsSync(out)) {
      throw new Error(`File ${_path.default.resolve(out)} already exists`);
    }

    const ws = _fs.default.createWriteStream(out, {
      encoding: hex ? 'utf8' : 'binary'
    });

    write = data => ws.write(data, err => err && console.error(err.message));

    close = ws.close.bind(ws);
  } else {
    write = data => process.stdout.write(data, err => err && console.error(err.message));
  }

  const dataHandler = ({
    data
  }) => {
    tick(data.length);

    if (hex) {
      write(`${(0, _helper.printBuffer)(data)}${_os.EOL}`);
    } else {
      write(data);
    }
  };

  device.once('uploadStart', ({
    domainSize
  }) => {
    const total = size || domainSize - offset;

    if (out) {
      const bar = new _progress.default(`  uploading [:bar] ${total <= 50 ? '' : ':rate/bps :percent '}:current/:total :etas`, {
        total: total,
        width: 20
      });
      tick = bar.tick.bind(bar);
    }

    if (hex && offset > 0) {
      write(`@${offset.toString(16).padStart(4, '0')}${_os.EOL}`); //       write(`DOMAIN: ${domain}
      // OFFSET: ${offset}
      // SIZE: ${total!}
      // `);
    }
  });
  device.on('uploadData', dataHandler);

  try {
    await device.upload(domain, offset, size);
  } finally {
    device.off('uploadData', dataHandler);
    close();
  }
}

const uploadCommand = {
  command: 'upload',
  describe: 'выгрузить домен из устройства',
  builder: argv => argv.option('domain', {
    default: 'CODE',
    describe: 'имя домена',
    string: true
  }).option('offset', {
    alias: 'ofs',
    default: 0,
    number: true,
    describe: 'смещение в домене'
  }).option('size', {
    alias: 'length',
    number: true,
    describe: 'требуемое количество байт'
  }).option('out', {
    alias: 'o',
    string: true,
    describe: 'сохранить в файл'
  }).option('hex', {
    boolean: true,
    describe: 'использовать текстовый формат'
  }).option('f', {
    alias: 'force',
    boolean: true,
    describe: 'перезаписать существующий файл'
  }).demandOption(['m', 'mac', 'domain']),
  handler: (0, _handlers.makeAddressHandler)(action, true)
};
var _default = uploadCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvY29tbWFuZHMvdXBsb2FkLnRzIl0sIm5hbWVzIjpbImFjdGlvbiIsImRldmljZSIsImFyZ3MiLCJkb21haW4iLCJvZmZzZXQiLCJzaXplIiwib3V0IiwiZm9yY2UiLCJoZXgiLCJxdWlldCIsIndyaXRlQXJncyIsImNsb3NlIiwid3JpdGUiLCJ0aWNrIiwiZnMiLCJleGlzdHNTeW5jIiwiRXJyb3IiLCJwYXRoIiwicmVzb2x2ZSIsIndzIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJlbmNvZGluZyIsImRhdGEiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtZXNzYWdlIiwiYmluZCIsInByb2Nlc3MiLCJzdGRvdXQiLCJkYXRhSGFuZGxlciIsImxlbmd0aCIsIkVPTCIsIm9uY2UiLCJkb21haW5TaXplIiwidG90YWwiLCJiYXIiLCJQcm9ncmVzcyIsIndpZHRoIiwidG9TdHJpbmciLCJwYWRTdGFydCIsIm9uIiwidXBsb2FkIiwib2ZmIiwidXBsb2FkQ29tbWFuZCIsImNvbW1hbmQiLCJkZXNjcmliZSIsImJ1aWxkZXIiLCJhcmd2Iiwib3B0aW9uIiwiZGVmYXVsdCIsInN0cmluZyIsImFsaWFzIiwibnVtYmVyIiwiYm9vbGVhbiIsImRlbWFuZE9wdGlvbiIsImhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFJQTs7QUFDQTs7QUFFQTs7OztBQWFPLGVBQWVBLE1BQWYsQ0FBc0JDLE1BQXRCLEVBQXVDQyxJQUF2QyxFQUFvRTtBQUN6RSxRQUFNO0FBQUVDLElBQUFBLE1BQUY7QUFBVUMsSUFBQUEsTUFBVjtBQUFrQkMsSUFBQUEsSUFBbEI7QUFBd0JDLElBQUFBLEdBQXhCO0FBQTZCQyxJQUFBQSxLQUE3QjtBQUFvQ0MsSUFBQUEsR0FBcEM7QUFBeUNDLElBQUFBO0FBQXpDLE1BQW1EUCxJQUF6RDtBQUNBLFFBQU1RLFNBQVMsR0FBR0osR0FBRyxHQUNqQixFQUNBLEdBQUdK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QUFFLE9BREk7QUFFWEUsSUFBQUEsT0FBTyxFQUFFLElBRkU7QUFHWFIsSUFBQUEsUUFBUSxFQUFFO0FBSEMsR0ExQmYsRUErQkdTLFlBL0JILENBK0JnQixDQUFDLEdBQUQsRUFBTSxLQUFOLEVBQWEsUUFBYixDQS9CaEIsQ0FKeUQ7QUFvQzNEQyxFQUFBQSxPQUFPLEVBQUUsa0NBQW1CeEQsTUFBbkIsRUFBMkIsSUFBM0I7QUFwQ2tELENBQTdEO2VBdUNlNEMsYSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE5LiBOYXRhLUluZm9cbiAqIEBhdXRob3IgQW5kcmVpIFNhcmFrZWV2IDxhdnNAbmF0YS1pbmZvLnJ1PlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBcIkBuYXRhXCIgcHJvamVjdC5cbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3XG4gKiB0aGUgRVVMQSBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgeyBBcmd1bWVudHMsIENvbW1hbmRNb2R1bGUsIERlZmluZWQgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAncHJvZ3Jlc3MnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuXG5pbXBvcnQgeyBJRGV2aWNlIH0gZnJvbSAnQG5hdGEvbmlidXMuanMtY2xpZW50L2xpYi9taWInO1xuaW1wb3J0IHsgVXBsb2FkRGF0YUxpc3RlbmVyIH0gZnJvbSAnQG5hdGEvbmlidXMuanMtY2xpZW50L2xpYi9taWIvZGV2aWNlcyc7XG5pbXBvcnQgeyBwcmludEJ1ZmZlciB9IGZyb20gJ0BuYXRhL25pYnVzLmpzLWNsaWVudC9saWIvbmlidXMvaGVscGVyJztcbmltcG9ydCB7IG1ha2VBZGRyZXNzSGFuZGxlciB9IGZyb20gJy4uL2hhbmRsZXJzJztcbmltcG9ydCB7IENvbW1vbk9wdHMgfSBmcm9tICcuLi9vcHRpb25zJztcbmltcG9ydCB7IGFjdGlvbiBhcyB3cml0ZUFjdGlvbiB9IGZyb20gJy4vd3JpdGUnO1xuXG50eXBlIFVwbG9hZE9wdHMgPSBEZWZpbmVkPENvbW1vbk9wdHMsICdtYWMnIHwgJ20nPiAmIHtcbiAgZG9tYWluOiBzdHJpbmcsXG4gIG9mZnNldDogbnVtYmVyLFxuICBzaXplPzogbnVtYmVyLFxuICBvPzogc3RyaW5nLFxuICBvdXQ/OiBzdHJpbmcsXG4gIGhleD86IGJvb2xlYW4sXG4gIGY/OiBib29sZWFuLFxuICBmb3JjZT86IGJvb2xlYW4sXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWN0aW9uKGRldmljZTogSURldmljZSwgYXJnczogQXJndW1lbnRzPFVwbG9hZE9wdHM+KSB7XG4gIGNvbnN0IHsgZG9tYWluLCBvZmZzZXQsIHNpemUsIG91dCwgZm9yY2UsIGhleCwgcXVpZXQgfSA9IGFyZ3M7XG4gIGNvbnN0IHdyaXRlQXJncyA9IG91dFxuICAgID8ge1xuICAgICAgLi4uYXJncyxcbiAgICAgIHF1aWV0OiB0cnVlLFxuICAgIH1cbiAgICA6IGFyZ3M7XG4gIGF3YWl0IHdyaXRlQWN0aW9uKGRldmljZSwgd3JpdGVBcmdzKTtcbiAgbGV0IGNsb3NlID0gKCkgPT4ge307XG4gIGxldCB3cml0ZTogKGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgbGV0IHRpY2sgPSAoc2l6ZTogbnVtYmVyKSA9PiB7fTtcblxuICBpZiAob3V0KSB7XG4gICAgaWYgKCFmb3JjZSAmJiBmcy5leGlzdHNTeW5jKG91dCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSAke3BhdGgucmVzb2x2ZShvdXQpfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cbiAgICBjb25zdCB3cyA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKG91dCwge1xuICAgICAgZW5jb2Rpbmc6IGhleCA/ICd1dGY4JyA6ICdiaW5hcnknLFxuICAgIH0pO1xuICAgIHdyaXRlID0gZGF0YSA9PiB3cy53cml0ZShkYXRhLCBlcnIgPT4gZXJyICYmIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpKTtcbiAgICBjbG9zZSA9IHdzLmNsb3NlLmJpbmQod3MpO1xuICB9IGVsc2Uge1xuICAgIHdyaXRlID0gZGF0YSA9PiBwcm9jZXNzLnN0ZG91dC53cml0ZShkYXRhLCBlcnIgPT4gZXJyICYmIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpKTtcbiAgfVxuICBjb25zdCBkYXRhSGFuZGxlcjogVXBsb2FkRGF0YUxpc3RlbmVyID0gKHsgZGF0YSB9KSA9PiB7XG4gICAgdGljayhkYXRhLmxlbmd0aCk7XG4gICAgaWYgKGhleCkge1xuICAgICAgd3JpdGUoYCR7cHJpbnRCdWZmZXIoZGF0YSl9JHtFT0x9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdyaXRlKGRhdGEpO1xuICAgIH1cbiAgfTtcblxuICBkZXZpY2Uub25jZSgndXBsb2FkU3RhcnQnLCAoeyBkb21haW5TaXplIH0pID0+IHtcbiAgICBjb25zdCB0b3RhbCA9IHNpemUgfHwgKGRvbWFpblNpemUgLSBvZmZzZXQpO1xuICAgIGlmIChvdXQpIHtcbiAgICAgIGNvbnN0IGJhciA9IG5ldyBQcm9ncmVzcyhcbiAgICAgICAgYCAgdXBsb2FkaW5nIFs6YmFyXSAke3RvdGFsISA8PSA1MCA/ICcnIDogJzpyYXRlL2JwcyA6cGVyY2VudCAnfTpjdXJyZW50Lzp0b3RhbCA6ZXRhc2AsXG4gICAgICAgIHtcbiAgICAgICAgICB0b3RhbDogdG90YWwhLFxuICAgICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICB0aWNrID0gYmFyLnRpY2suYmluZChiYXIpO1xuICAgIH1cbiAgICBpZiAoaGV4ICYmIG9mZnNldCA+IDApIHtcbiAgICAgIHdyaXRlKGBAJHtvZmZzZXQudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDQsICcwJyl9JHtFT0x9YCk7XG4vLyAgICAgICB3cml0ZShgRE9NQUlOOiAke2RvbWFpbn1cbi8vIE9GRlNFVDogJHtvZmZzZXR9XG4vLyBTSVpFOiAke3RvdGFsIX1cbi8vIGApO1xuICAgIH1cbiAgfSk7XG4gIGRldmljZS5vbigndXBsb2FkRGF0YScsIGRhdGFIYW5kbGVyKTtcblxuICB0cnkge1xuICAgIGF3YWl0IGRldmljZS51cGxvYWQoZG9tYWluLCBvZmZzZXQsIHNpemUpO1xuICB9IGZpbmFsbHkge1xuICAgIGRldmljZS5vZmYoJ3VwbG9hZERhdGEnLCBkYXRhSGFuZGxlcik7XG4gICAgY2xvc2UoKTtcbiAgfVxufVxuXG5jb25zdCB1cGxvYWRDb21tYW5kOiBDb21tYW5kTW9kdWxlPENvbW1vbk9wdHMsIFVwbG9hZE9wdHM+ID0ge1xuICBjb21tYW5kOiAndXBsb2FkJyxcbiAgZGVzY3JpYmU6ICfQstGL0LPRgNGD0LfQuNGC0Ywg0LTQvtC80LXQvSDQuNC3INGD0YHRgtGA0L7QudGB0YLQstCwJyxcbiAgYnVpbGRlcjogYXJndiA9PlxuICAgIGFyZ3ZcbiAgICAgIC5vcHRpb24oJ2RvbWFpbicsIHtcbiAgICAgICAgZGVmYXVsdDogJ0NPREUnLFxuICAgICAgICBkZXNjcmliZTogJ9C40LzRjyDQtNC+0LzQtdC90LAnLFxuICAgICAgICBzdHJpbmc6IHRydWUsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignb2Zmc2V0Jywge1xuICAgICAgICBhbGlhczogJ29mcycsXG4gICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICAgICAgZGVzY3JpYmU6ICfRgdC80LXRidC10L3QuNC1INCyINC00L7QvNC10L3QtScsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignc2l6ZScsIHtcbiAgICAgICAgYWxpYXM6ICdsZW5ndGgnLFxuICAgICAgICBudW1iZXI6IHRydWUsXG4gICAgICAgIGRlc2NyaWJlOiAn0YLRgNC10LHRg9C10LzQvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INCx0LDQudGCJyxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXQnLCB7XG4gICAgICAgIGFsaWFzOiAnbycsXG4gICAgICAgIHN0cmluZzogdHJ1ZSxcbiAgICAgICAgZGVzY3JpYmU6ICfRgdC+0YXRgNCw0L3QuNGC0Ywg0LIg0YTQsNC50LsnLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2hleCcsIHtcbiAgICAgICAgYm9vbGVhbjogdHJ1ZSxcbiAgICAgICAgZGVzY3JpYmU6ICfQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YLQtdC60YHRgtC+0LLRi9C5INGE0L7RgNC80LDRgicsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignZicsIHtcbiAgICAgICAgYWxpYXM6ICdmb3JjZScsXG4gICAgICAgIGJvb2xlYW46IHRydWUsXG4gICAgICAgIGRlc2NyaWJlOiAn0L/QtdGA0LXQt9Cw0L/QuNGB0LDRgtGMINGB0YPRidC10YHRgtCy0YPRjtGJ0LjQuSDRhNCw0LnQuycsXG4gICAgICB9KVxuICAgICAgLmRlbWFuZE9wdGlvbihbJ20nLCAnbWFjJywgJ2RvbWFpbiddKSxcbiAgaGFuZGxlcjogbWFrZUFkZHJlc3NIYW5kbGVyKGFjdGlvbiwgdHJ1ZSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1cGxvYWRDb21tYW5kO1xuIl19