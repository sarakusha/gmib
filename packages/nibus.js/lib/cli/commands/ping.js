"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _nibus = _interopRequireDefault(require("@nata/nibus.js-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const delay = timeout => new Promise(resolve => setTimeout(resolve, timeout * 1000));

const round = val => Math.round(val * 10) / 10;

const pingCommand = {
  command: 'ping',
  describe: 'пропинговать устройство',
  builder: argv => argv.option('c', {
    alias: 'count',
    describe: 'остановиться после отправки указанного количества ответов',
    number: true
  }).option('t', {
    alias: 'timeout',
    describe: 'задать таймаут в секундах',
    default: 1,
    number: true
  }).demandOption(['m', 'mac']),
  handler: async ({
    count = -1,
    timeout = 1,
    mac,
    quiet,
    raw
  }) => {
    await _nibus.default.start();
    const stat = [];
    let transmitted = 0;
    process.on('exit', () => {
      const loss = 100 - round(stat.length / transmitted * 100);

      const min = _lodash.default.min(stat);

      const max = _lodash.default.max(stat);

      const avg = round(_lodash.default.mean(stat));
      quiet || raw || console.info(`
${transmitted} пакет(ов) отправлено, ${stat.length} пакет(ов) получено, ${loss}% пакетов потеряно
min/avg/max = ${min || '-'}/${Number.isNaN(avg) ? '-' : avg}/${max || '-'}`);
    });
    let exit = false;
    process.on('SIGINT', () => {
      exit = true;
    });

    while (count - transmitted !== 0 && !exit) {
      const ping = await _nibus.default.ping(mac);
      if (ping !== -1) stat.push(ping);
      transmitted += 1;
      quiet || raw || console.info(`${mac} ${ping !== -1 ? `${ping} ms` : '*'}`);
      if (count - transmitted === 0) break;
      await delay(timeout);
    }

    _nibus.default.close();

    if (raw) console.info(stat.length);
    if (stat.length === 0) return Promise.reject();
  }
};
var _default = pingCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvY29tbWFuZHMvcGluZy50cyJdLCJuYW1lcyI6WyJkZWxheSIsInRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJyb3VuZCIsInZhbCIsIk1hdGgiLCJwaW5nQ29tbWFuZCIsImNvbW1hbmQiLCJkZXNjcmliZSIsImJ1aWxkZXIiLCJhcmd2Iiwib3B0aW9uIiwiYWxpYXMiLCJudW1iZXIiLCJkZWZhdWx0IiwiZGVtYW5kT3B0aW9uIiwiaGFuZGxlciIsImNvdW50IiwibWFjIiwicXVpZXQiLCJyYXciLCJzZXNzaW9uIiwic3RhcnQiLCJzdGF0IiwidHJhbnNtaXR0ZWQiLCJwcm9jZXNzIiwib24iLCJsb3NzIiwibGVuZ3RoIiwibWluIiwiXyIsIm1heCIsImF2ZyIsIm1lYW4iLCJjb25zb2xlIiwiaW5mbyIsIk51bWJlciIsImlzTmFOIiwiZXhpdCIsInBpbmciLCJwdXNoIiwiY2xvc2UiLCJyZWplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOzs7O0FBVUEsTUFBTUEsS0FBSyxHQUFJQyxPQUFELElBQXFCLElBQUlDLE9BQUosQ0FBWUMsT0FBTyxJQUFJQyxVQUFVLENBQUNELE9BQUQsRUFBVUYsT0FBTyxHQUFHLElBQXBCLENBQWpDLENBQW5DOztBQUNBLE1BQU1JLEtBQUssR0FBSUMsR0FBRCxJQUFpQkMsSUFBSSxDQUFDRixLQUFMLENBQVdDLEdBQUcsR0FBRyxFQUFqQixJQUF1QixFQUF0RDs7QUFFQSxNQUFNRSxXQUFnRCxHQUFHO0FBQ3ZEQyxFQUFBQSxPQUFPLEVBQUUsTUFEOEM7QUFFdkRDLEVBQUFBLFFBQVEsRUFBRSx5QkFGNkM7QUFHdkRDLEVBQUFBLE9BQU8sRUFBRUMsSUFBSSxJQUFJQSxJQUFJLENBQ2xCQyxNQURjLENBQ1AsR0FETyxFQUNGO0FBQ1hDLElBQUFBLEtBQUssRUFBRSxPQURJO0FBRVhKLElBQUFBLFFBQVEsRUFBRSwyREFGQztBQUdYSyxJQUFB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biAqIEBhdXRob3IgQW5kcmVpIFNhcmFrZWV2IDxhdnNAbmF0YS1pbmZvLnJ1PlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBcIkBuYXRhXCIgcHJvamVjdC5cbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3XG4gKiB0aGUgRVVMQSBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21tYW5kTW9kdWxlLCBEZWZpbmVkIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBzZXNzaW9uIGZyb20gJ0BuYXRhL25pYnVzLmpzLWNsaWVudCc7XG5pbXBvcnQgeyBDb21tb25PcHRzIH0gZnJvbSAnLi4vb3B0aW9ucyc7XG5cbnR5cGUgUGluZ09wdHMgPSBEZWZpbmVkPENvbW1vbk9wdHMsICdtJyB8ICdtYWMnPiAmIHtcbiAgYz86IG51bWJlcixcbiAgY291bnQ/OiBudW1iZXIsXG4gIHQ6IG51bWJlcixcbiAgdGltZW91dD86IG51bWJlcixcbn07XG5cbmNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQgKiAxMDAwKSk7XG5jb25zdCByb3VuZCA9ICh2YWw6IG51bWJlcikgPT4gTWF0aC5yb3VuZCh2YWwgKiAxMCkgLyAxMDtcblxuY29uc3QgcGluZ0NvbW1hbmQ6IENvbW1hbmRNb2R1bGU8Q29tbW9uT3B0cywgUGluZ09wdHM+ID0ge1xuICBjb21tYW5kOiAncGluZycsXG4gIGRlc2NyaWJlOiAn0L/RgNC+0L/QuNC90LPQvtCy0LDRgtGMINGD0YHRgtGA0L7QudGB0YLQstC+JyxcbiAgYnVpbGRlcjogYXJndiA9PiBhcmd2XG4gICAgLm9wdGlvbignYycsIHtcbiAgICAgIGFsaWFzOiAnY291bnQnLFxuICAgICAgZGVzY3JpYmU6ICfQvtGB0YLQsNC90L7QstC40YLRjNGB0Y8g0L/QvtGB0LvQtSDQvtGC0L/RgNCw0LLQutC4INGD0LrQsNC30LDQvdC90L7Qs9C+INC60L7Qu9C40YfQtdGB0YLQstCwINC+0YLQstC10YLQvtCyJyxcbiAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ3QnLCB7XG4gICAgICBhbGlhczogJ3RpbWVvdXQnLFxuICAgICAgZGVzY3JpYmU6ICfQt9Cw0LTQsNGC0Ywg0YLQsNC50LzQsNGD0YIg0LIg0YHQtdC60YPQvdC00LDRhScsXG4gICAgICBkZWZhdWx0OiAxLFxuICAgICAgbnVtYmVyOiB0cnVlLFxuICAgIH0pXG4gICAgLmRlbWFuZE9wdGlvbihbJ20nLCAnbWFjJ10pLFxuICBoYW5kbGVyOiBhc3luYyAoeyBjb3VudCA9IC0xLCB0aW1lb3V0ID0gMSwgbWFjLCBxdWlldCwgcmF3IH0pID0+IHtcbiAgICBhd2FpdCBzZXNzaW9uLnN0YXJ0KCk7XG4gICAgY29uc3Qgc3RhdDogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgdHJhbnNtaXR0ZWQgPSAwO1xuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb3NzID0gMTAwIC0gcm91bmQoc3RhdC5sZW5ndGggLyB0cmFuc21pdHRlZCAqIDEwMCk7XG4gICAgICBjb25zdCBtaW4gPSBfLm1pbihzdGF0KTtcbiAgICAgIGNvbnN0IG1heCA9IF8ubWF4KHN0YXQpO1xuICAgICAgY29uc3QgYXZnID0gcm91bmQoXy5tZWFuKHN0YXQpKTtcbiAgICAgIHF1aWV0IHx8IHJhdyB8fCBjb25zb2xlLmluZm8oYFxuJHt0cmFuc21pdHRlZH0g0L/QsNC60LXRgijQvtCyKSDQvtGC0L/RgNCw0LLQu9C10L3QviwgJHtzdGF0Lmxlbmd0aH0g0L/QsNC60LXRgijQvtCyKSDQv9C+0LvRg9GH0LXQvdC+LCAke2xvc3N9JSDQv9Cw0LrQtdGC0L7QsiDQv9C+0YLQtdGA0Y/QvdC+XG5taW4vYXZnL21heCA9ICR7bWluIHx8ICctJ30vJHtOdW1iZXIuaXNOYU4oYXZnKSA/ICctJyA6IGF2Z30vJHttYXggfHwgJy0nfWApO1xuICAgIH0pO1xuICAgIGxldCBleGl0ID0gZmFsc2U7XG4gICAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xuICAgICAgZXhpdCA9IHRydWU7XG4gICAgfSk7XG4gICAgd2hpbGUgKGNvdW50IC0gdHJhbnNtaXR0ZWQgIT09IDAgJiYgIWV4aXQpIHtcbiAgICAgIGNvbnN0IHBpbmcgPSBhd2FpdCBzZXNzaW9uLnBpbmcobWFjKTtcbiAgICAgIGlmIChwaW5nICE9PSAtMSkgc3RhdC5wdXNoKHBpbmcpO1xuICAgICAgdHJhbnNtaXR0ZWQgKz0gMTtcbiAgICAgIHF1aWV0IHx8IHJhdyB8fCBjb25zb2xlLmluZm8oYCR7bWFjfSAke3BpbmcgIT09IC0xID8gYCR7cGluZ30gbXNgIDogJyonfWApO1xuICAgICAgaWYgKGNvdW50IC0gdHJhbnNtaXR0ZWQgPT09IDApIGJyZWFrO1xuICAgICAgYXdhaXQgZGVsYXkodGltZW91dCk7XG4gICAgfVxuICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICBpZiAocmF3KSBjb25zb2xlLmluZm8oc3RhdC5sZW5ndGgpO1xuICAgIGlmIChzdGF0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBwaW5nQ29tbWFuZDtcbiJdfQ==