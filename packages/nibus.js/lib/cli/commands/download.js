"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = action;
exports.default = exports.convert = void 0;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _progress = _interopRequireDefault(require("progress"));

var _handlers = require("../handlers");

var _write = require("./write");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readAllFromStdin() {
  const buffers = []; // let rest = max;

  const onData = buffer => {
    // if (rest <= 0) return;
    buffers.push(buffer); // rest -= buffer.length;
  };

  return new Promise((resolve, reject) => {
    process.stdin.on('data', onData).once('end', () => {
      process.stdin.off('data', onData);
      process.stdin.off('error', reject);
      resolve(Buffer.concat(buffers));
    }).once('error', reject);
  });
}

const convert = buffer => {
  const lines = buffer.toString('ascii').split(/\r?\n/g);
  let offset = 0;
  if (lines.length === 0) return [Buffer.alloc(0), 0];
  const first = lines[0];
  let start = 0;

  if (first[0] === '@') {
    offset = parseInt(first.slice(1), 16);
    start = 1;
  }

  const hexToBuf = hex => Buffer.from(hex.split(/[\s:-=]/g).join(''), 'hex');

  return [Buffer.concat(lines.slice(start).map(hexToBuf)), offset];
};

exports.convert = convert;

async function action(device, args) {
  const {
    domain,
    offset,
    source,
    hex
  } = args;
  await (0, _write.action)(device, args);
  let buffer;
  let ofs = 0;

  let tick = size => {};

  if (source) {
    buffer = await _fs.default.promises.readFile(source);
    if (hex) [buffer, ofs] = convert(buffer);
    const dest = (offset || ofs).toString(16).padStart(4, '0');
    const bar = new _progress.default(`  downloading [:bar] to ${dest} :rate/bps :percent :current/:total :etas`, {
      total: buffer.length,
      width: 20
    });
    tick = bar.tick.bind(bar);
  } else {
    buffer = await readAllFromStdin();

    if (hex) {
      [buffer, ofs] = convert(buffer);
    }
  }

  device.on('downloadData', ({
    domain: dataDomain,
    length
  }) => {
    if (dataDomain === domain) tick(length);
  });
  await device.download(domain, buffer, offset || ofs, !args.terminate);
}

const downloadCommand = {
  command: 'download',
  describe: 'загрузить домен в устройство',
  builder: argv => argv.option('domain', {
    default: 'CODE',
    describe: 'имя домена',
    string: true
  }).option('offset', {
    alias: 'ofs',
    default: 0,
    number: true,
    describe: 'смещение в домене'
  }).option('source', {
    alias: 'src',
    string: true,
    describe: 'загрузить данные из файла'
  }).option('hex', {
    boolean: true,
    describe: 'использовать текстовый формат'
  }).check(({
    hex,
    raw
  }) => {
    if (hex && raw) throw new Error('Arguments hex and raw are mutually exclusive');
    return true;
  }).option('execute', {
    alias: 'exec',
    string: true,
    describe: 'выполнить программу после записи'
  }).option('term', {
    alias: 'terminate',
    describe: 'выполнять TerminateDownloadSequence в конце',
    boolean: true,
    default: true
  }).demandOption(['m', 'mac']),
  handler: (0, _handlers.makeAddressHandler)(action, true)
};
var _default = downloadCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvY29tbWFuZHMvZG93bmxvYWQudHMiXSwibmFtZXMiOlsicmVhZEFsbEZyb21TdGRpbiIsImJ1ZmZlcnMiLCJvbkRhdGEiLCJidWZmZXIiLCJwdXNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9jZXNzIiwic3RkaW4iLCJvbiIsIm9uY2UiLCJvZmYiLCJCdWZmZXIiLCJjb25jYXQiLCJjb252ZXJ0IiwibGluZXMiLCJ0b1N0cmluZyIsInNwbGl0Iiwib2Zmc2V0IiwibGVuZ3RoIiwiYWxsb2MiLCJmaXJzdCIsInN0YXJ0IiwicGFyc2VJbnQiLCJzbGljZSIsImhleFRvQnVmIiwiaGV4IiwiZnJvbSIsImpvaW4iLCJtYXAiLCJhY3Rpb24iLCJkZXZpY2UiLCJhcmdzIiwiZG9tYWluIiwic291cmNlIiwib2ZzIiwidGljayIsInNpemUiLCJmcyIsInByb21pc2VzIiwicmVhZEZpbGUiLCJkZXN0IiwicGFkU3RhcnQiLCJiYXIiLCJQcm9ncmVzcyIsInRvdGFsIiwid2lkdGgiLCJiaW5kIiwiZGF0YURvbWFpbiIsImRvd25sb2FkIiwidGVybWluYXRlIiwiZG93bmxvYWRDb21tYW5kIiwiY29tbWFuZCIsImRlc2NyaWJlIiwiYnVpbGRlciIsImFyZ3YiLCJvcHRpb24iLCJkZWZhdWx0Iiwic3RyaW5nIiwiYWxpYXMiLCJudW1iZXIiLCJib29sZWFuIiwiY2hlY2siLCJyYXciLCJFcnJvciIsImRlbWFuZE9wdGlvbiIsImhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFHQTs7QUFFQTs7OztBQVlBLFNBQVNBLGdCQUFULEdBQTRCO0FBQzFCLFFBQU1DLE9BQWlCLEdBQUcsRUFBMUIsQ0FEMEIsQ0FFMUI7O0FBQ0EsUUFBTUMsTUFBTSxHQUFJQyxNQUFELElBQW9CO0FBQ2pDO0FBQ0FGLElBQUFBLE9BQU8sQ0FBQ0csSUFBUixDQUFhRCxNQUFiLEVBRmlDLENBR2pDO0FBQ0QsR0FK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TSxFQUFFLElBSFE7QUFJaEJQLElBQUFBLFFBQVEsRUFBRTtBQUpNLEdBTnBCLEVBWUdHLE1BWkgsQ0FZVSxRQVpWLEVBWW9CO0FBQ2hCRyxJQUFBQSxLQUFLLEVBQUUsS0FEUztBQUVoQkQsSUFBQUEsTUFBTSxFQUFFLElBRlE7QUFHaEJMLElBQUFBLFFBQVEsRUFBRTtBQUhNLEdBWnBCLEVBaUJHRyxNQWpCSCxDQWlCVSxLQWpCVixFQWlCaUI7QUFDYkssSUFBQUEsT0FBTyxFQUFFLElBREk7QUFFYlIsSUFBQUEsUUFBUSxFQUFFO0FBRkcsR0FqQmpCLEVBcUJHUyxLQXJCSCxDQXFCUyxDQUFDO0FBQUVwQyxJQUFBQSxHQUFGO0FBQU9xQyxJQUFBQTtBQUFQLEdBQUQsS0FBa0I7QUFDdkIsUUFBSXJDLEdBQUcsSUFBSXFDLEdBQVgsRUFBZ0IsTUFBTSxJQUFJQyxLQUFKLENBQVUsOENBQVYsQ0FBTjtBQUNoQixXQUFPLElBQVA7QUFDRCxHQXhCSCxFQXlCR1IsTUF6QkgsQ0F5QlUsU0F6QlYsRUF5QnFCO0FBQ2pCRyxJQUFBQSxLQUFLLEVBQUUsTUFEVTtBQUVqQkQsSUFBQUEsTUFBTSxFQUFFLElBRlM7QUFHakJMLElBQUFBLFFBQVEsRUFBRTtBQUhPLEdBekJyQixFQThCR0csTUE5QkgsQ0E4QlUsTUE5QlYsRUE4QmtCO0FBQ2RHLElBQUFBLEtBQUssRUFBRSxXQURPO0FBRWROLElBQUFBLFFBQVEsRUFBRSw2Q0FGSTtBQUdkUSxJQUFBQSxPQUFPLEVBQUUsSUFISztBQUlkSixJQUFBQSxPQUFPLEVBQUU7QUFKSyxHQTlCbEIsRUFvQ0dRLFlBcENILENBb0NnQixDQUFDLEdBQUQsRUFBTSxLQUFOLENBcENoQixDQUo2RDtBQXlDL0RDLEVBQUFBLE9BQU8sRUFBRSxrQ0FBbUJwQyxNQUFuQixFQUEyQixJQUEzQjtBQXpDc0QsQ0FBakU7ZUE0Q2VxQixlIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkuIE5hdGEtSW5mb1xuICogQGF1dGhvciBBbmRyZWkgU2FyYWtlZXYgPGF2c0BuYXRhLWluZm8ucnU+XG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFwiQG5hdGFcIiBwcm9qZWN0LlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXdcbiAqIHRoZSBFVUxBIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCB7IEFyZ3VtZW50cywgQ29tbWFuZE1vZHVsZSwgRGVmaW5lZCB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAncHJvZ3Jlc3MnO1xuXG5pbXBvcnQgeyBJRGV2aWNlIH0gZnJvbSAnQG5hdGEvbmlidXMuanMtY2xpZW50L2xpYi9taWInO1xuaW1wb3J0IHsgbWFrZUFkZHJlc3NIYW5kbGVyIH0gZnJvbSAnLi4vaGFuZGxlcnMnO1xuaW1wb3J0IHsgQ29tbW9uT3B0cyB9IGZyb20gJy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgYWN0aW9uIGFzIHdyaXRlQWN0aW9uIH0gZnJvbSAnLi93cml0ZSc7XG5cbnR5cGUgRG93bmxvYWRPcHRzID0gRGVmaW5lZDxDb21tb25PcHRzLCAnbScgfCAnbWFjJz4gJiB7XG4gIGRvbWFpbjogc3RyaW5nLFxuICBvZmZzZXQ6IG51bWJlcixcbiAgc291cmNlPzogc3RyaW5nLFxuICBzcmM/OiBzdHJpbmcsXG4gIGhleD86IGJvb2xlYW4sXG4gIGV4ZWN1dGU/OiBzdHJpbmcsXG4gIHRlcm1pbmF0ZT86IGJvb2xlYW4sXG59O1xuXG5mdW5jdGlvbiByZWFkQWxsRnJvbVN0ZGluKCkge1xuICBjb25zdCBidWZmZXJzOiBCdWZmZXJbXSA9IFtdO1xuICAvLyBsZXQgcmVzdCA9IG1heDtcbiAgY29uc3Qgb25EYXRhID0gKGJ1ZmZlcjogQnVmZmVyKSA9PiB7XG4gICAgLy8gaWYgKHJlc3QgPD0gMCkgcmV0dXJuO1xuICAgIGJ1ZmZlcnMucHVzaChidWZmZXIpO1xuICAgIC8vIHJlc3QgLT0gYnVmZmVyLmxlbmd0aDtcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPEJ1ZmZlcj4oKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBwcm9jZXNzLnN0ZGluXG4gICAgICAub24oJ2RhdGEnLCBvbkRhdGEpXG4gICAgICAub25jZSgnZW5kJywgKCkgPT4ge1xuICAgICAgICBwcm9jZXNzLnN0ZGluLm9mZignZGF0YScsIG9uRGF0YSk7XG4gICAgICAgIHByb2Nlc3Muc3RkaW4ub2ZmKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgIHJlc29sdmUoQnVmZmVyLmNvbmNhdChidWZmZXJzKSk7XG4gICAgICB9KVxuICAgICAgLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcbiAgfSkpO1xufVxuXG5leHBvcnQgY29uc3QgY29udmVydCA9IChidWZmZXI6IEJ1ZmZlcik6IFtCdWZmZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCBsaW5lcyA9IGJ1ZmZlci50b1N0cmluZygnYXNjaWknKS5zcGxpdCgvXFxyP1xcbi9nKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHJldHVybiBbQnVmZmVyLmFsbG9jKDApLCAwXTtcbiAgY29uc3QgZmlyc3QgPSBsaW5lc1swXTtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgaWYgKGZpcnN0WzBdID09PSAnQCcpIHtcbiAgICBvZmZzZXQgPSBwYXJzZUludChmaXJzdC5zbGljZSgxKSwgMTYpO1xuICAgIHN0YXJ0ID0gMTtcbiAgfVxuICBjb25zdCBoZXhUb0J1ZiA9IChoZXg6IHN0cmluZykgPT4gQnVmZmVyLmZyb20oaGV4LnNwbGl0KC9bXFxzOi09XS9nKS5qb2luKCcnKSwgJ2hleCcpO1xuICByZXR1cm4gW0J1ZmZlci5jb25jYXQobGluZXMuc2xpY2Uoc3RhcnQpLm1hcChoZXhUb0J1ZikpLCBvZmZzZXRdO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFjdGlvbihcbiAgZGV2aWNlOiBJRGV2aWNlLFxuICBhcmdzOiBBcmd1bWVudHM8RG93bmxvYWRPcHRzPikge1xuICBjb25zdCB7IGRvbWFpbiwgb2Zmc2V0LCBzb3VyY2UsIGhleCB9ID0gYXJncztcbiAgYXdhaXQgd3JpdGVBY3Rpb24oZGV2aWNlLCBhcmdzKTtcbiAgbGV0IGJ1ZmZlcjogQnVmZmVyO1xuICBsZXQgb2ZzID0gMDtcbiAgbGV0IHRpY2sgPSAoc2l6ZTogbnVtYmVyKSA9PiB7fTtcbiAgaWYgKHNvdXJjZSkge1xuICAgIGJ1ZmZlciA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHNvdXJjZSk7XG4gICAgaWYgKGhleCkgW2J1ZmZlciwgb2ZzXSA9IGNvbnZlcnQoYnVmZmVyKTtcbiAgICBjb25zdCBkZXN0ID0gKG9mZnNldCB8fCBvZnMpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg0LCAnMCcpO1xuICAgIGNvbnN0IGJhciA9IG5ldyBQcm9ncmVzcyhcbiAgICAgIGAgIGRvd25sb2FkaW5nIFs6YmFyXSB0byAke2Rlc3R9IDpyYXRlL2JwcyA6cGVyY2VudCA6Y3VycmVudC86dG90YWwgOmV0YXNgLFxuICAgICAge1xuICAgICAgICB0b3RhbDogYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgd2lkdGg6IDIwLFxuICAgICAgfSxcbiAgICApO1xuICAgIHRpY2sgPSBiYXIudGljay5iaW5kKGJhcik7XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyID0gYXdhaXQgcmVhZEFsbEZyb21TdGRpbigpO1xuICAgIGlmIChoZXgpIHtcbiAgICAgIFtidWZmZXIsIG9mc10gPSBjb252ZXJ0KGJ1ZmZlcik7XG4gICAgfVxuICB9XG4gIGRldmljZS5vbignZG93bmxvYWREYXRhJywgKHsgZG9tYWluOiBkYXRhRG9tYWluLCBsZW5ndGggfSkgPT4ge1xuICAgIGlmIChkYXRhRG9tYWluID09PSBkb21haW4pIHRpY2sobGVuZ3RoKTtcbiAgfSk7XG5cbiAgYXdhaXQgZGV2aWNlLmRvd25sb2FkKGRvbWFpbiwgYnVmZmVyLCBvZmZzZXQgfHwgb2ZzLCAhYXJncy50ZXJtaW5hdGUpO1xufVxuXG5jb25zdCBkb3dubG9hZENvbW1hbmQ6IENvbW1hbmRNb2R1bGU8Q29tbW9uT3B0cywgRG93bmxvYWRPcHRzPiA9IHtcbiAgY29tbWFuZDogJ2Rvd25sb2FkJyxcbiAgZGVzY3JpYmU6ICfQt9Cw0LPRgNGD0LfQuNGC0Ywg0LTQvtC80LXQvSDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvicsXG4gIGJ1aWxkZXI6IGFyZ3YgPT5cbiAgICBhcmd2XG4gICAgICAub3B0aW9uKCdkb21haW4nLCB7XG4gICAgICAgIGRlZmF1bHQ6ICdDT0RFJyxcbiAgICAgICAgZGVzY3JpYmU6ICfQuNC80Y8g0LTQvtC80LXQvdCwJyxcbiAgICAgICAgc3RyaW5nOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ29mZnNldCcsIHtcbiAgICAgICAgYWxpYXM6ICdvZnMnLFxuICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICBudW1iZXI6IHRydWUsXG4gICAgICAgIGRlc2NyaWJlOiAn0YHQvNC10YnQtdC90LjQtSDQsiDQtNC+0LzQtdC90LUnLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ3NvdXJjZScsIHtcbiAgICAgICAgYWxpYXM6ICdzcmMnLFxuICAgICAgICBzdHJpbmc6IHRydWUsXG4gICAgICAgIGRlc2NyaWJlOiAn0LfQsNCz0YDRg9C30LjRgtGMINC00LDQvdC90YvQtSDQuNC3INGE0LDQudC70LAnLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2hleCcsIHtcbiAgICAgICAgYm9vbGVhbjogdHJ1ZSxcbiAgICAgICAgZGVzY3JpYmU6ICfQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YLQtdC60YHRgtC+0LLRi9C5INGE0L7RgNC80LDRgicsXG4gICAgICB9KVxuICAgICAgLmNoZWNrKCh7IGhleCwgcmF3IH0pID0+IHtcbiAgICAgICAgaWYgKGhleCAmJiByYXcpIHRocm93IG5ldyBFcnJvcignQXJndW1lbnRzIGhleCBhbmQgcmF3IGFyZSBtdXR1YWxseSBleGNsdXNpdmUnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KVxuICAgICAgLm9wdGlvbignZXhlY3V0ZScsIHtcbiAgICAgICAgYWxpYXM6ICdleGVjJyxcbiAgICAgICAgc3RyaW5nOiB0cnVlLFxuICAgICAgICBkZXNjcmliZTogJ9Cy0YvQv9C+0LvQvdC40YLRjCDQv9GA0L7Qs9GA0LDQvNC80YMg0L/QvtGB0LvQtSDQt9Cw0L/QuNGB0LgnLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ3Rlcm0nLCB7XG4gICAgICAgIGFsaWFzOiAndGVybWluYXRlJyxcbiAgICAgICAgZGVzY3JpYmU6ICfQstGL0L/QvtC70L3Rj9GC0YwgVGVybWluYXRlRG93bmxvYWRTZXF1ZW5jZSDQsiDQutC+0L3RhtC1JyxcbiAgICAgICAgYm9vbGVhbjogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAuZGVtYW5kT3B0aW9uKFsnbScsICdtYWMnXSksXG4gIGhhbmRsZXI6IG1ha2VBZGRyZXNzSGFuZGxlcihhY3Rpb24sIHRydWUpLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZG93bmxvYWRDb21tYW5kO1xuIl19