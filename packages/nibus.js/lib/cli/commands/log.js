"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _tail = require("tail");

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

var _nibus = require("@nata/nibus.js-client");

var _ipc = require("@nata/nibus.js-client/lib/ipc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.default)('nibus:log');
const logCommand = {
  command: 'log',
  describe: 'задать уровень логгирования',
  builder: argv => argv.option('level', {
    alias: ['l', 'lev'],
    desc: 'уровень',
    choices: ['none', 'hex', 'nibus']
  }).option('pick', {
    desc: 'выдавать указанные поля в логах nibus',
    array: true
  }).option('omit', {
    desc: 'выдавть поля кроме указанных в логах nibus',
    array: true
  }).option('begin', {
    alias: 'b',
    describe: 'вывод с начала',
    boolean: true
  }),
  handler: ({
    level,
    pick,
    omit,
    begin
  }) => new Promise((resolve, reject) => {
    const socket = _ipc.Client.connect(_nibus.PATH);

    let resolved = false;
    socket.once('close', () => {
      resolved ? resolve() : reject();
    });
    socket.on('error', err => {
      debug('<error>', err);
    });
    socket.on('connect', async () => {
      try {
        await socket.send('setLogLevel', level, pick, omit);
        resolved = true;
      } catch {}

      socket.destroy();
    });
    const log = new _tail.Tail(_path.default.resolve((0, _os.homedir)(), '.pm2', 'logs', 'nibus.service-error.log'), {
      fromBeginning: !!begin
    });
    process.on('SIGINT', () => log.unwatch());
    log.watch();
    log.on('line', console.log.bind(console));
  })
};
var _default = logCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvY29tbWFuZHMvbG9nLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwibG9nQ29tbWFuZCIsImNvbW1hbmQiLCJkZXNjcmliZSIsImJ1aWxkZXIiLCJhcmd2Iiwib3B0aW9uIiwiYWxpYXMiLCJkZXNjIiwiY2hvaWNlcyIsImFycmF5IiwiYm9vbGVhbiIsImhhbmRsZXIiLCJsZXZlbCIsInBpY2siLCJvbWl0IiwiYmVnaW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNvY2tldCIsIkNsaWVudCIsImNvbm5lY3QiLCJQQVRIIiwicmVzb2x2ZWQiLCJvbmNlIiwib24iLCJlcnIiLCJzZW5kIiwiZGVzdHJveSIsImxvZyIsIlRhaWwiLCJwYXRoIiwiZnJvbUJlZ2lubmluZyIsInByb2Nlc3MiLCJ1bndhdGNoIiwid2F0Y2giLCJjb25zb2xlIiwiYmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsb0JBQWEsV0FBYixDQUFkO0FBQ0EsTUFBTUMsVUFBeUIsR0FBRztBQUNoQ0MsRUFBQUEsT0FBTyxFQUFFLEtBRHVCO0FBRWhDQyxFQUFBQSxRQUFRLEVBQUUsNkJBRnNCO0FBR2hDQyxFQUFBQSxPQUFPLEVBQUVDLElBQUksSUFBSUEsSUFBSSxDQUNsQkMsTUFEYyxDQUNQLE9BRE8sRUFDRTtBQUNmQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQyxHQUFELEVBQU0sS0FBTixDQURRO0FBRWZDLElBQUFBLElBQUksRUFBRSxTQUZTO0FBR2ZDLElBQUFBLE9BQU8sRUFBRSxDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLE9BQWhCO0FBSE0sR0FERixFQU1kSCxNQU5jLENBTVAsTUFOTyxFQU1DO0FBQ2RFLElBQUFBLElBQUksRUFBRSx1Q0FEUTtBQUVkRSxJQUFBQSxLQUFLLEVBQUU7QUFGTyxHQU5ELEVBVWRKLE1BVmMsQ0FVUCxNQVZPLEVBVUM7QUFDZEUsSUFBQUEsSUFBSSxFQUFFLDRDQURRO0FBRWRFLElBQUFBLEtBQUssRUFBRTtBQUZPLEdBVkQsRUFjZEosTUFkYyxDQWNQLE9BZE8sRUFjRTtBQUNmQyxJQUFBQSxLQUFLLEVBQUUsR0FEUTtBQUVmSixJQUFBQSxRQUFRLEVBQUUsZ0JBRks7QUFHZlEsSUFBQUEsT0FBTyxFQUFFO0FBSE0sR0FkRixDQUhlO0FBc0JoQ0MsRUFBQUEsT0FBTyxFQUFFLENBQUM7QUFBRUMsSUFBQUEsS0FBRjtBQUFTQyxJQUFBQSxJQUFUO0FBQWVDLElBQUFBLElBQWY7QUFBcUJDLElBQUFBO0FBQXJCLEdBQUQsS0FBa0MsSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUMxRSxVQUFNQyxNQUFNLEdBQUdDLFlBQU9DLE9BQVAsQ0FBZUMsV0FBZixDQUFmOztBQUNBLFFBQUlDLFFBQVEsR0FBRyxLQUFmO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLE9BQVosRUFBcUIsTUFBTTtBQUN6QkQsTUFBQUEsUUFBUSxHQUFHTixPQUFPLEVBQVYsR0FBZUMsTUFBTSxFQUE3QjtBQUNELEtBRkQ7QUFHQUMsSUFBQUEsTUFBTSxDQUFDTSxFQUFQLENBQVUsT0FBVixFQUFvQkMsR0FBRCxJQUFTO0FBQzFCM0IsTUFBQUEsS0FBSyxDQUFDLFNBQUQsRUFBWTJCLEdBQVosQ0FBTDtBQUNELEtBRkQ7QUFHQVAsSUFBQUEsTUFBTSxDQUFDTSxFQUFQLENBQVUsU0FBVixFQUFxQixZQUFZO0FBQy9CLFVBQUk7QUFDRixjQUFNTixNQUFNLENBQUNRLElBQVAsQ0FBWSxhQUFaLEVBQTJCZixLQUEzQixFQUFrQ0MsSUFBbEMsRUFBd0NDLElBQXhDLENBQU47QUFDQVMsUUFBQUEsUUFBUSxHQUFHLElBQVg7QUFDRCxPQUhELENBR0UsTUFBTSxDQUFFOztBQUNWSixNQUFBQSxNQUFNLENBQUNTLE9BQVA7QUFDRCxLQU5EO0FBT0EsVUFBTUMsR0FBRyxHQUFHLElBQUlDLFVBQUosQ0FBU0MsY0FBS2QsT0FBTCxDQUNuQixrQkFEbUIsRUFFbkIsTUFGbUIsRUFHbkIsTUFIbUIsRUFJbkIseUJBSm1CLENBQVQsRUFLVDtBQUFFZSxNQUFBQSxhQUFhLEVBQUUsQ0FBQyxDQUFDakI7QUFBbkIsS0FMUyxDQUFaO0FBTUFrQixJQUFBQSxPQUFPLENBQUNSLEVBQVIsQ0FBVyxRQUFYLEVBQXFCLE1BQU1JLEdBQUcsQ0FBQ0ssT0FBSixFQUEzQjtBQUNBTCxJQUFBQSxHQUFHLENBQUNNLEtBQUo7QUFDQU4sSUFBQUEsR0FBRyxDQUFDSixFQUFKLENBQU8sTUFBUCxFQUFlVyxPQUFPLENBQUNQLEdBQVIsQ0FBWVEsSUFBWixDQUFpQkQsT0FBakIsQ0FBZjtBQUNELEdBekIwQztBQXRCWCxDQUFsQztlQWtEZXBDLFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOS4gTmF0YS1JbmZvXG4gKiBAYXV0aG9yIEFuZHJlaSBTYXJha2VldiA8YXZzQG5hdGEtaW5mby5ydT5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgXCJAbmF0YVwiIHByb2plY3QuXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2Ugdmlld1xuICogdGhlIEVVTEEgZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IHsgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCBkZWJ1Z0ZhY3RvcnkgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgVGFpbCB9IGZyb20gJ3RhaWwnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBob21lZGlyIH0gZnJvbSAnb3MnO1xuaW1wb3J0IHsgUEFUSCB9IGZyb20gJ0BuYXRhL25pYnVzLmpzLWNsaWVudCc7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICdAbmF0YS9uaWJ1cy5qcy1jbGllbnQvbGliL2lwYyc7XG5cbmNvbnN0IGRlYnVnID0gZGVidWdGYWN0b3J5KCduaWJ1czpsb2cnKTtcbmNvbnN0IGxvZ0NvbW1hbmQ6IENvbW1hbmRNb2R1bGUgPSB7XG4gIGNvbW1hbmQ6ICdsb2cnLFxuICBkZXNjcmliZTogJ9C30LDQtNCw0YLRjCDRg9GA0L7QstC10L3RjCDQu9C+0LPQs9C40YDQvtCy0LDQvdC40Y8nLFxuICBidWlsZGVyOiBhcmd2ID0+IGFyZ3ZcbiAgICAub3B0aW9uKCdsZXZlbCcsIHtcbiAgICAgIGFsaWFzOiBbJ2wnLCAnbGV2J10sXG4gICAgICBkZXNjOiAn0YPRgNC+0LLQtdC90YwnLFxuICAgICAgY2hvaWNlczogWydub25lJywgJ2hleCcsICduaWJ1cyddLFxuICAgIH0pXG4gICAgLm9wdGlvbigncGljaycsIHtcbiAgICAgIGRlc2M6ICfQstGL0LTQsNCy0LDRgtGMINGD0LrQsNC30LDQvdC90YvQtSDQv9C+0LvRjyDQsiDQu9C+0LPQsNGFIG5pYnVzJyxcbiAgICAgIGFycmF5OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignb21pdCcsIHtcbiAgICAgIGRlc2M6ICfQstGL0LTQsNCy0YLRjCDQv9C+0LvRjyDQutGA0L7QvNC1INGD0LrQsNC30LDQvdC90YvRhSDQsiDQu9C+0LPQsNGFIG5pYnVzJyxcbiAgICAgIGFycmF5OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignYmVnaW4nLCB7XG4gICAgICBhbGlhczogJ2InLFxuICAgICAgZGVzY3JpYmU6ICfQstGL0LLQvtC0INGBINC90LDRh9Cw0LvQsCcsXG4gICAgICBib29sZWFuOiB0cnVlLFxuICAgIH0pLFxuICBoYW5kbGVyOiAoeyBsZXZlbCwgcGljaywgb21pdCwgYmVnaW4gfSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNvY2tldCA9IENsaWVudC5jb25uZWN0KFBBVEgpO1xuICAgIGxldCByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHNvY2tldC5vbmNlKCdjbG9zZScsICgpID0+IHtcbiAgICAgIHJlc29sdmVkID8gcmVzb2x2ZSgpIDogcmVqZWN0KCk7XG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGRlYnVnKCc8ZXJyb3I+JywgZXJyKTtcbiAgICB9KTtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBzb2NrZXQuc2VuZCgnc2V0TG9nTGV2ZWwnLCBsZXZlbCwgcGljaywgb21pdCk7XG4gICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgfSk7XG4gICAgY29uc3QgbG9nID0gbmV3IFRhaWwocGF0aC5yZXNvbHZlKFxuICAgICAgaG9tZWRpcigpLFxuICAgICAgJy5wbTInLFxuICAgICAgJ2xvZ3MnLFxuICAgICAgJ25pYnVzLnNlcnZpY2UtZXJyb3IubG9nJyxcbiAgICApLCB7IGZyb21CZWdpbm5pbmc6ICEhYmVnaW4gfSk7XG4gICAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4gbG9nLnVud2F0Y2goKSk7XG4gICAgbG9nLndhdGNoKCk7XG4gICAgbG9nLm9uKCdsaW5lJywgY29uc29sZS5sb2cuYmluZChjb25zb2xlKSk7XG4gIH0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nQ29tbWFuZDtcbiJdfQ==