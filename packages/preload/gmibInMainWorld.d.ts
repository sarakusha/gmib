interface Window {
    /**
     * Expose Environment versions.
     * @example
     * console.log( window.versions )
     */
    readonly versions: NodeJS.ProcessVersions;
    readonly server: { port: number; };
    readonly setDispatch: (newDispatch: Dispatch) => void;
    readonly nibus: { createDevice: { (parent: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId, address: string, mib: string): void; (parent: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId, address: string, type: number, version?: number | undefined): void; }; readonly setDeviceValue: (deviceId: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId) => (name: string, value: import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").ValueType) => Promise<void>; findMibByType: (type: number, version?: number | undefined) => string | undefined; readonly reloadDevices: () => void; readonly setLogLevel: (logLevel: 'nibus' | 'none' | 'hex') => void; readonly ping: (address: string) => Promise<[-1, undefined] | [number, Version]>; readonly sendConfig: (state: Record<string, unknown>) => void; readonly reloadDevice: (deviceId: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId) => Promise<void>; readonly releaseDevice: (deviceId: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId) => void; readonly writeToStorage: (deviceId: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId) => Promise<boolean>; readonly findDevices: (options: import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").FinderOptions) => Promise<void>; readonly cancelSearch: () => Promise<void>; readonly telemetry: (id: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId) => import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").NibusTelemetry; readonly getBrightnessHistory: (dt?: number | undefined) => Promise<import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/ipc/events").BrightnessHistory[]>; readonly mibTypes: { value: string; name: string; }[]; readonly flash: (id: import("/Users/sarakusha/WebstormProjects/gmib/node_modules/@nibus/core/build/module/mib/devices").DeviceId, kind: false | 'fpga' | 'mcu' | 'rbf' | 'ttc' | 'ctrl' | 'tca' | 'tcc', filename: string | undefined, moduleSelect?: number | undefined) => Promise<void>; };
    readonly config: { readonly get: <Key extends keyof import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").LocalConfig>(key: Key) => Promise<import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").LocalConfig[Key]>; readonly set: <Key extends keyof import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").LocalConfig>(key: Key, value: import("/Users/sarakusha/WebstormProjects/gmib/packages/common/helpers").LocalConfig[Key]) => Promise<void>; };
    readonly dialogs: { readonly showOpenDialogSync: { (browserWindow: Electron.BrowserWindow, options: Electron.OpenDialogSyncOptions): string[] | undefined; (options: Electron.OpenDialogSyncOptions): string[] | undefined; }; readonly showErrorBox: (title: string, content: string) => void; readonly saveJSON: (options: SaveOpts) => boolean; readonly loadJSON: (title?: string) => Record<string, unknown> | null; };
    readonly log: (...params: any[]) => void;
    readonly setLogLevel: (logLevel: 'nibus' | 'none' | 'hex') => void;
    readonly identify: { readonly getSecret: () => string | undefined; readonly setSecret: (apiSecret: bigint | null, identifier?: string | undefined) => void; readonly getIdentifier: () => string | undefined; readonly generateSignature: (method: string, uri: string, timestamp: number, body?: unknown) => string | undefined; };
    readonly initializeNovastar: () => Promise<boolean>;
    readonly mediaSource: { readonly close: (screenId: number) => void; readonly play: _.DebouncedFunc<(screenId: number) => Promise<void>>; };
}
